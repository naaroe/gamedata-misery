--[[------------------------------------------------------------------------------------------------
Helicopter movement
Андрущенко Иван

--------------------------------------------------------------------------------------------------]]
local state_move = 0
----------------------------------------------------------------------------------------------------
class "heli_move"

function heli_move:__init( obj, storage )
	self.object     = obj
	self.heliObject = obj:get_helicopter()
	self.a          = storage

	self.heli_fly = heli_fly.get_heli_flyer(obj)
	self.heli_fire = heli_fire.get_heli_firer(obj)
	self.heli_look = heli_look.get_heli_looker(obj)
end

function heli_move:reset_scheme( loading )
	local is_path = self.a.path_move ~= "" and level.patrol_path_exists(self.a.path_move)

	self.a.signals = {}

	self.heliObject:TurnEngineSound( self.a.engine_sound )

	self.patrol_move = is_path and patrol(self.a.path_move)
	self.patrol_move_info = is_path and utils.path_parse_waypoints(self.a.path_move)

	if (self.a.path_look and self.a.path_look ~= "") then
		if self.a.path_look == "actor" then
			self.heli_fly:set_look_point(db.actor:position())
			self:update_look_state()
		else
			self.patrol_look = patrol(self.a.path_look)
			self.heli_fly:set_look_point(self.patrol_look:point( 0 ))
			self:update_look_state()
			if not self.patrol_look then
				abort("object '%s': unable to find path_look '%s' on the map",self.object:name(), self.a.path_look)
				return
			end
		end
	else
		self.patrol_look = nil
	end

	self.last_index = loading and xr_logic.pstor_retrieve( self.object, "li"  )
	self.next_index = loading and xr_logic.pstor_retrieve( self.object, "ni"  )
	self.state = loading and xr_logic.pstor_retrieve( self.object, "st"  )
	self.was_callback = loading and xr_logic.pstor_retrieve( self.object, "wc"  )

	self.stop_point	= nil
	self.by_stop_fire_fly = false

	self._flag_to_wp_callback = false

	self.heli_fly.max_velocity = self.a.max_velocity or 150
	self.heli_fly.heliLAccFW = self.heli_fly.max_velocity / 15
	self.heli_fly.heliLAccBW = 2 * self.heli_fly.heliLAccFW / 3

	self.heliObject:SetLinearAcc(self.heli_fly.heliLAccFW, self.heli_fly.heliLAccBW)
	self.heliObject:SetMaxVelocity(self.heli_fly.max_velocity)
	self.heliObject:UseFireTrail(self.a.fire_trail)

	self.heliObject.m_max_mgun_dist = self.a.max_mgun_dist or self.heliObject.m_max_mgun_dist
	self.heliObject.m_max_rocket_dist = self.a.max_rocket_dist or self.heliObject.m_max_rocket_dist
	self.heliObject.m_min_mgun_dist = self.a.min_mgun_dist or self.heliObject.m_min_mgun_dist
	self.heliObject.m_min_rocket_dist = self.a.min_rocket_dist or self.heliObject.m_min_rocket_dist
	self.heliObject.m_use_mgun_on_attack = self.a.use_mgun or true
	self.heliObject.m_use_rocket_on_attack = self.a.use_rocket or true

	self.heli_fire.upd_vis = self.a.upd_vis
	self.heli_fire:update_enemy_state()
	self.heli_fire.enemy_ = self.a.enemy_
	alun_utils.printf("self.a.enemy_ = %s",self.a.enemy_)
	self.heli_fire.enemy = nil
	self.heli_fire.flag_by_enemy = true

	if (self.a.show_health) then
		self.heli_fire:cs_remove()
		self.heli_fire.show_health = true
		self.heli_fire:cs_heli()
	else
		self.heli_fire.show_health = false
		self.heli_fire:cs_remove()
	end

	self:update_movement_state()
end

function heli_move:beh_move()
	if not (self.a.desired_position) then
		return
	end

	local pos = self.object:position()
	pos = vector():set(pos.x,self.a.desired_position.y,pos.z)

	local dist = pos:distance_to(self.a.desired_position)
	if (dist > 2.5) then
		self.heliObject:SetDestPosition(self.a.desired_position)
		return
	end

	if (self.a.target == "waypoint") then
		if (not self.a.wait_delay) then
			self.a.wait_delay = time_global() + (self.a.point_delay or 1000)
		end
		if (self.a.wait_delay and time_global() > self.a.wait_delay) then
			self:increment_waypoint_index()
			self.a.wait_delay = nil
		end
	end
end

function heli_move:set_desired_behavior()
	self.a.behavior = xr_logic.pick_section_from_condlist(db.actor, self.object, self.a.behavior_state,"behavior_state")
end

function heli_move:set_desired_position()
	local target = self.a.goto_target and xr_logic.pick_section_from_condlist(db.actor, self.object, self.a.goto_target)
	if not (target) or (target == "") then
		self.a.desired_position = nil
		return
	end
	self.a.target = target

	local pos
	local obj = get_story_object(target)
	if (obj) then
		pos = obj:position()
	elseif (target == "waypoint") then
		local pt = self:get_current_waypoint()
		local t = alun_utils.str_explode(pt,",")
		pos = t[1] and t[2] and t[3] and vector():set(tonumber(t[1]),tonumber(t[2]),tonumber(t[3]))
		self.a.point_delay = t[4] and tonumber(t[4])
	else
		local t = alun_utils.str_explode(target,",")
		pos = t[1] and t[2] and t[3] and vector():set(tonumber(t[1]),tonumber(t[2]),tonumber(t[3]))
		self.a.point_delay = t[4] and tonumber(t[4])
	end
	self.a.desired_position = pos
end

function heli_move:get_current_waypoint()
	if not (self.a.pathpoint) then
		return {}
	end

	if (not self.a.path_index or self.a.path_index > #self.a.pathpoint) then
		self.a.path_index = 1
	end

	return self.a.pathpoint[self.a.path_index]
end

function heli_move:increment_waypoint_index()
	if (self.a.path_index == #self.a.pathpoint and not self.a.path_reverse) then
		local new_section = xr_logic.pick_section_from_condlist(db.actor, self.object, self.a.path_end)
		if (new_section and new_section ~= "nil") then
			if (new_section == "reverse") then
				self.a.path_reverse = true
			elseif (new_section ~= "loop") then
				xr_logic.switch_to_section(self.object, db.storage[self.object:id()].ini, new_section)
			else
				self.a.path_index = 1
			end
		end
	elseif (self.a.path_index == 1 and self.a.path_reverse) then
		self.a.path_reverse = nil
		self.a.path_index = 1
	else
		self.a.path_index = self.a.path_reverse and self.a.path_index - 1 or self.a.path_index + 1
	end
end

function heli_move:save()
	xr_logic.pstor_store( self.object, "st",  self.state )
----------------------------------Вейпоинты - Начало------------------------------------------------
	xr_logic.pstor_store( self.object, "li",  self.last_index       or false )
	xr_logic.pstor_store( self.object, "ni",  self.next_index       or false )
----------------------------------Вейпоинты - Конец-------------------------------------------------
	xr_logic.pstor_store( self.object, "wc",  self.was_callback )
end

function heli_move:update( delta )

	if xr_logic.try_switch_to_another_section(self.object, self.a, db.actor) then
		return
	end

	self:set_desired_behavior()

	if (self.a.behavior == "move") then
		self:set_desired_position()
	end

	if (self.a.behavior and self.a.desired_position) then
		if (self.a.behavior == "wait") then
			return
		elseif (self.a.behavior == "move") then
			self:beh_move()
		end
		return
	end

		--self.heli_fire:update_enemy_state()
	if self.was_callback then
		self:update_movement_state()
		self.was_callback = false
	end
		if self.a.path_look then
				if self.a.path_look == "actor" then
						self.heli_fly:set_look_point(db.actor:position())
						if self.a.stop_fire then
								if self.heliObject:isVisible( db.actor ) then
										if not self.by_stop_fire_fly then
												self.stop_point = self.object:position()
												self.by_stop_fire_fly = true
												self.was_callback = true
												--'printf("Stop Fire!")
										end
								else
										--'printf("Fly to next point!")
										self.by_stop_fire_fly = false
										self.was_callback = true
								end
						end
				end
				self:update_look_state()
		end
		if not self.a.path_look and self.heli_look.look_state then
				self.heli_look:calc_look_point(self.heli_fly.dest_point, true)
		end
end

function heli_move:update_movement_state()
	--'printf("update_movement_state()")
	if not (self.patrol_move) then
		return
	end

	self.state = state_move

	if self.patrol_move then
		if not self.last_index then
			self.last_index = 0
			self.next_index = 1
		else
			self.next_index = self.last_index + 1

			if self.next_index >= self.patrol_move:count() then
				self.next_index = 0
			end
		end
	end
		if not self.by_stop_fire_fly then
				if self.patrol_move:count() > 2 then
						self._flag_to_wp_callback = self.heli_fly:fly_on_point_with_vector(
								self.patrol_move:point( self.last_index ),
								self.patrol_move:point( self.next_index ),
								self.max_velocity, self._flag_to_wp_callback, false)
				else
						if self.patrol_move:count() > 1 then
								self._flag_to_wp_callback = self.heli_fly:fly_on_point_with_vector(
										self.patrol_move:point( self.last_index ),
										self.patrol_move:point( self.next_index ),
										self.max_velocity, true, true)
						else
								self._flag_to_wp_callback = self.heli_fly:fly_on_point_with_vector(
										self.patrol_move:point( self.last_index ),
										self.patrol_move:point( self.last_index ),
										self.max_velocity, true, true)
						end
				end
		else
				self._flag_to_wp_callback = self.heli_fly:fly_on_point_with_vector(
						self.stop_point,
						self.stop_point,
						self.max_velocity, true, false)
				self._flag_to_wp_callback = true
		end
end

function heli_move:update_look_state()
--'    printf("update_look_state()")
		self.heli_fly:set_block_flook(true)
		self.heli_fly:look_at_position()
end

function heli_move:waypoint_callback( obj, action_type, index )

----------------------------------Вейпоинты - Начало------------------------------------------------
	if not self._flag_to_wp_callback then
				--'printf("heli_pos=[%d;%d;%d]",self.object:position().x,self.object:position().y,self.object:position().z)
				--'printf("dist_to_dest_point=%d",self.heliObject:GetDistanceToDestPosition())

		if self.patrol_move then
			if index == self.last_index then
				return
			end

			if index ~= -1 then
				self.last_index = index
			else
		--' Выдать коллбек
						if self.patrol_move_info[self.last_index] ~= nil then
							local signal = self.patrol_move_info[self.last_index]["sig"]
										if signal ~= nil then
									self.a.signals[signal] = true
										end
						end
								if self.patrol_move:count()>1 then
										self.last_index = self.next_index
								end
			end
		end
	end

----------------------------------Вейпоинты - Конец-------------------------------------------------


--'	printf("Dist To Dest Point: %s", self.heliObject:GetDistanceToDestPosition())
--'	printf("heli_move:waypoint_callback(): name=%s, index=%d", self.object:name(), index)

	self.was_callback = true

end

---------------------------------------------------------------------------------------------------------------------

function add_to_binder( npc, ini, scheme, section, storage )
	printf( "DEBUG: add_to_binder: npc:name()='%s', scheme='%s', section='%s'", npc:name(), scheme, section )

	local new_action = heli_move( npc, storage )

	-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
	xr_logic.subscribe_action_for_events( npc, storage, new_action )
end

function set_scheme( npc, ini, scheme, section )
	local a = xr_logic.assign_storage_and_bind( npc, ini, scheme, section )

	a.logic = xr_logic.cfg_get_switch_conditions( ini, section, npc )

	a.path_move         = utils.cfg_get_string( ini, section, "path_move", npc, true,  "")
	a.path_look         = utils.cfg_get_string( ini, section, "path_look", npc, false, "")
	a.max_velocity      = utils.cfg_get_number( ini, section, "max_velocity", npc, true, 300 )
	a.enemy_            = utils.cfg_get_string( ini, section, "enemy", npc, false, "")
	a.fire_point        = utils.cfg_get_string( ini, section, "fire_point", npc, false, "")
	a.max_mgun_dist     = utils.cfg_get_number( ini, section, "max_mgun_attack_dist", npc, false )
	a.max_rocket_dist   = utils.cfg_get_number( ini, section, "max_rocket_attack_dist", npc, false )
	a.min_mgun_dist     = utils.cfg_get_number( ini, section, "min_mgun_attack_dist", npc, false )
	a.min_rocket_dist   = utils.cfg_get_number( ini, section, "min_rocket_attack_dist", npc, false )
	a.use_rocket        = utils.cfg_get_bool( ini, section, "use_rocket", npc, false, true )
	a.use_mgun          = utils.cfg_get_bool( ini, section, "use_mgun", npc, false, true )
	a.engine_sound      = utils.cfg_get_bool( ini, section, "engine_sound", npc, false, true )
	a.upd_vis           = utils.cfg_get_number( ini, section, "upd_vis", npc, false, 10 )
	a.stop_fire         = utils.cfg_get_bool( ini, section, "stop_fire", npc, false, false )
	a.show_health       = utils.cfg_get_bool( ini, section, "show_health", npc, false, false )
	a.fire_trail        = utils.cfg_get_bool( ini, section, "fire_trail", npc, false, false )
	local st = db.storage[npc:id()]
	st.invulnerable = utils.cfg_get_bool( ini, section, "invulnerable", npc, false, false )
	st.immortal     = utils.cfg_get_bool( ini, section, "immortal",     npc, false, false )
	st.mute         = utils.cfg_get_bool( ini, section, "mute",         npc, false, false )

	a.behavior_state 	= xr_logic.parse_condlist(npc, section, "behavior_state",		utils.cfg_get_string(ini, section, "behavior_state", npc, false, "", 	"wait"))
	a.goto_target		= xr_logic.parse_condlist(npc, section, "goto_target", 			utils.cfg_get_string(ini, section, "goto_target", npc, false, "", 	""))
	a.path_end 			= xr_logic.parse_condlist(npc, section, "path_end", 	utils.cfg_get_string(ini, section, "path_end", npc, false, "", "nil" ))

	if (a.pathpoint and next(a.pathpoint) ) then
		return
	end

	a.pathpoint = {}
	a.path_index = 1

	local i = 1
	local str,pos
	while ini:line_exist(section,"pt"..tostring(i)) do
		local str = ini:r_string(section,"pt"..tostring(i))
		i = i + 1
		if not (str) then
			return
		end
		table.insert(a.pathpoint,str)
	end
end

function string_to_vector(str)
	local t = alun_utils.str_explode(str,",")
	return vector():set(tonumber(t[1]),tonumber(t[2]),tonumber(t[3])),t[4] and tonumber(t[4])
end
