--'******************************************************
--'*  Биндер объекта смарт кавер .
--'******************************************************
registered_smartcovers = {}

function bind(obj)
	obj:bind_object(smart_cover_binder(obj))
end

class "smart_cover_binder" (object_binder)
function smart_cover_binder:__init(obj) super(obj)
end
function smart_cover_binder:net_spawn(server_object)
	if not object_binder.net_spawn(self, server_object) then
		return false
	end
	local name = self.object:name()
	if (string.find(name,self.object:id())) then
		local story_name = story_objects.get_story_objects_registry():get_story_id(self.object:id())
		name = story_name or name
	end
	registered_smartcovers[name] = self.object
	--printf("smart_cover_binder.net_spawn() smart_cover [%s] is registered %s", self.object:name(), vec_to_str(self.object:direction()))
	return true
end
function smart_cover_binder:net_destroy()
	local name = self.object:name()
	if (string.find(name,self.object:id())) then
		local story_name = story_objects.get_story_objects_registry():get_story_id(self.object:id())
		name = story_name or name
	end
	registered_smartcovers[name] = nil
	--printf("smart_cover_binder.net_destroy() smart_cover [%s] is unregistered", self.object:name())
	object_binder.net_destroy(self)
end

function smart_cover_binder:update(delta)
	object_binder.update(self, delta)
end

