--------------------------------------------------------------------------------
-- Psi Storm manager class -----------------------------------------------------
-- Made by Cromm Cruac ---------------------------------------------------------
-- for AtmosFear 3 -------------------------------------------------------------
-- 25.06.2011 ------------------------------------------------------------------
--------------------------------------------------------------------------------

local psi_storm_manager 	= nil
local prev_sec 			= -1
local prev_game_sec 		= -1
local diff_sec 			= -1
local diff_game_sec		= -1
local min_psi_storm_time 	= 12*60*60
local max_psi_storm_time 	= 24*60*60
local artifact_chance 		= 0.05
--local self.atmosfear.opt_psi_storm_fate				= "turntozombie"

local immuned_to_surge_squads = {
						["monster_predatory_day"] 		= true,
						["monster_predatory_night"] 	= true,
						["monster_vegetarian"] 			= true,
						["monster_zombied_day"] 		= true,
						["monster_zombied_night"] 		= true,
						["monster_special"] 			= true,
						["monster"]						= true,
						["freedom_sci"]					= true,
						["freedom_sci_hostile"]			= true,
						["stalker_sci"]					= true,
						["stalker_sci_hostile"]			= true,
						["monolith"]					= true,
						["monolith_pripyat"]			= true,
						["monolith_sci"]					= true,
						["monolith_sci_pripyat"]			= true,
						["stalker_elite"]				= true,
						["stalker_elite_hostile"]		= true,
						["stalker_hunter_night"]		= true,
						["stalker_hunter_night_hostile"]	= true,
						["stalker_guide"]				= true,
						["dolg_elite"]					= true,
						["dolg_elite_hostile"]			= true,
						["dolg_hunter_night"]			= true,
						["dolg_hunter_night_hostile"]	= true,
						["freedom_elite"]				= true,
						["freedom_elite_hostile"]		= true,
						["zombied"]						= true
						 }

class "PsiStormManager"
function PsiStormManager:__init()
end

function PsiStormManager:initialize()
	self.atmosfear=atmosfear.get_atmosfear()
	self.surge_manager=surge_manager.get_surge_manager()
	self.ini = ini_file("misc\\surge_manager.ltx")
	self.game_time_factor=level.get_time_factor()
	self.started = false
	self.finished = true
	self.count = 0
	self.covers = {}
	self:init_psi_storm_covers()
	self.inited_time = game.get_game_time()
	self.vortexes={}
	self.lights={}
	self.vortex_index=0
	self.vortex_period_min=5
	self.vortex_period_max=28
	self.vortex_distance_max=350
	self.next_vortex_at=nil
	self.max_distance_psi_hit=125
	self.max_distance_electro_hit=30
	self.max_distance_npc_hit=30
	self.psi_storm_duration = 296 -- (duration: about 40mins of game time)
	self.stages={}
	self.psi_storm_message 		= ""
	self.psi_storm_task_sect 	= ""
	self.loaded = false
	self.time_forwarded = false
	self.thunders={}
	self.thunder_index=0
	self.last_psi_storm_time = game.get_game_time()
	min_psi_storm_time=math.floor(self.atmosfear.opt_psi_storm_freq/2)*3600
	max_psi_storm_time=self.atmosfear.opt_psi_storm_freq*3600
	self._delta = math.random(min_psi_storm_time, max_psi_storm_time)
	self.artifacts = { 	af_electra_flash 		= 0.25,
						af_dummy_dummy 			= 0.10,
						af_ice 					= 0.05,
						af_electra_moonlight	= 0.45,
						af_cristall_flower 		= 0.15
						}
end

function PsiStormManager:start(manual)
	self.game_time_factor=level.get_time_factor()
	--self.atmosfear.debugMessages[1]:SetText("game_time_factor = "..tostring(self.game_time_factor))
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = self.last_psi_storm_time:get(Y, M, D, h, m, s, ms)
	if(manual) then
		self.inited_time = game.get_game_time()
	else
		self.inited_time:set(Y, M, D, h, m, s + self._delta, ms)
	end

	diff_sec = math.ceil(game.get_game_time():diffSec(self.inited_time)/level.get_time_factor())
	local level_name = level.name()
	if(level_name=="labx8" or level_name=="jupiter_underground" or self.atmosfear.opt_enable_psi_storm==0) then
		--self.atmosfear.debugMessages[12]:SetText("psi storm skipped because of level")
		self:skip_psi_storm()
		return
	end
	if(diff_sec+6>self.psi_storm_duration) then
		--self.atmosfear.debugMessages[12]:SetText("psi storm skipped while time forwarding!")
		--self.atmosfear.debugMessages[13]:SetText("psi storm skipped because of duration")
		self:skip_psi_storm()
	else
		--self.atmosfear.debugMessages[14]:SetText("psi storm started")
		self.started = true
		self.finished = false
		self.hitFactor=0
		self.stages={}
		self.vortexes={}
		self.lights={}
		self.next_vortex_at = nil
		level.set_time_factor(10)
		--self.atmosfear.debugMessages[2]:SetText("level.get_time_factor() = "..tostring(level.get_time_factor()))
	--db.actor:give_game_news("hide_from_psi_storm_message_caption", "hide_from_psi_storm_message", "ui_inGame2_psi_storm", 0, 10000)
	end
end

function PsiStormManager:new_psi_storm_time(reset)
	if reset then
		self.last_psi_storm_time 	= game.get_game_time()
	end
	self.last_psi_storm_time 	= game.get_game_time()
	min_psi_storm_time		= math.floor(self.atmosfear.opt_psi_storm_freq/2)*3600
	max_psi_storm_time		= self.atmosfear.opt_psi_storm_freq*3600
	self._delta 			= math.random(min_psi_storm_time, max_psi_storm_time)

	local g_time = game.get_game_time()
	local psi_storm_start = math.floor(self._delta - g_time:diffSec(self.last_psi_storm_time))
	local psi_storm_end = math.floor(self._delta+3600 - g_time:diffSec(self.last_psi_storm_time))
	local surge_start = math.floor(self.surge_manager._delta - g_time:diffSec(self.surge_manager.last_surge_time))
	local surge_end = math.floor(self.surge_manager._delta+3600 - g_time:diffSec(self.surge_manager.last_surge_time))
	if ((psi_storm_end > surge_start) and (psi_storm_end < surge_end)) then
		--1h earlier
		self._delta=self._delta-3600
		--self.atmosfear.debugMessages[3]:SetText("psi storm earlier in "..tostring(self._delta))
	end
	if ((psi_storm_start > surge_start) and (psi_storm_start < surge_end)) then
		--1h later
		self._delta=self._delta+3600
		--self.atmosfear.debugMessages[3]:SetText("psi storm later in "..tostring(self._delta))
	end
end

function PsiStormManager:skip_psi_storm()
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = self.inited_time:get(Y, M, D, h, m, s, ms)
	self.last_psi_storm_time:set(Y, M, D, h, m, s + self.psi_storm_duration, ms)

	self:new_psi_storm_time(false)

	self.started 			= false
	self.finished 			= true

	self.psi_storm_message 		= ""
	self.psi_storm_task_sect 	= ""
	self.task_given 		= false
	prev_sec				= 0
	level.set_time_factor(self.game_time_factor)
	--self.atmosfear.debugMessages[2]:SetText("level.get_time_factor() = "..tostring(level.get_time_factor()))
end

function PsiStormManager:finish(manual)
	--self.atmosfear.debugMessages[2]:SetText("psi storm stopped at: "..tostring(diff_sec))
	self.started 			= false
	self.finished 			= true
	self.last_psi_storm_time 	= game.get_game_time()

	self:new_psi_storm_time(false)

	for k,v in pairs(db.signal_light) do
		v:stop_light()
		v:stop()
	end

	self.psi_storm_message 		= ""
	self.psi_storm_task_sect 	= ""
	self.task_given 		= false

	if(manual or (self.time_forwarded and level_weathers.get_weather_manager().weather_fx)) then
		for key,vortex in pairs(self.vortexes) do
			vortex.effect:stop()
			vortex.sound:stop()
			vortex=nil
		end
		level.stop_weather_fx()
		level_weathers.get_weather_manager():forced_weather_change()
	end
	for k,snd in pairs(self.surge_manager.blowout_sounds) do
		if snd ~= nil and snd:playing() then
			snd:stop()
		end
	end
	prev_sec = 0

	level.set_time_factor(self.game_time_factor)
	--self.atmosfear.debugMessages[2]:SetText("level.get_time_factor() = "..tostring(level.get_time_factor()))

	if self.loaded then
	end
	--db.actor:give_game_news("end_psi_storm_message_caption", "end_psi_storm_message", "ui_inGame2_psi_storm", 0, 10000)
end

function PsiStormManager:init_psi_storm_covers()
	local ini = self.ini
	for i = 0, ini:line_count("list")-1 do
		temp1, id, temp2 = ini:r_line("list", i, "", "")
		local zone = db.zone_by_name[id]
		if zone ~= nil then
			self.count = self.count + 1
			self.covers[self.count] = zone
			if(ini:line_exist(id, "condlist")) then
				self.covers[self.count].condlist = {}
				self.covers[self.count].condlist = xr_logic.parse_condlist(npc, id, "condlist", ini:r_string(id, "condlist"))
			end
		end
	end
end

function PsiStormManager:get_nearest_cover()
	if(self.loaded) then
		self:init_psi_storm_covers()
	end
	local hides = {}
	utils.copy_table(hides, self.covers)
	if(self.count>0) then
		for k,v in pairs(hides) do
			if (v.condlist) then
				local sect = xr_logic.pick_section_from_condlist(db.actor, nil, v.condlist)
				if(sect~="true" and sect~=nil) then
					table.remove(hides, k)
				end
			end
		end
		local nearest_cover_id = hides[1]:id()
		local nearest_cover_dist = hides[1]:position():distance_to(db.actor:position())
		for k,v in pairs(hides) do
			if db.storage[v:id()].object:inside(db.actor:position()) then
				return v:id()
			end
			local dist = v:position():distance_to(db.actor:position())
			if(dist<nearest_cover_dist) then
				if(v.condlist) then
					local sect = xr_logic.pick_section_from_condlist(db.actor, nil, v.condlist)
					if(sect=="true") then
						nearest_cover_id = v:id()
						nearest_cover_dist = dist
					end
				else
					nearest_cover_id = v:id()
					nearest_cover_dist = dist
				end
			end
		end
		if(nearest_cover_id==hides[1]:id()) then
			if(hides[1].condlist) then
				local sect = xr_logic.pick_section_from_condlist(db.actor, nil, hides[1].condlist)
				if(sect~="true" and sect~=nil) then
					return nil
				end
			end
		end
		return nearest_cover_id
	else
		return nil
	end
end

function distance_2d(p1, p2)
	--return math.sqrt( (b.x-a.x)^2 + (b.z-a.z)^2 )
	return p1:distance_to_xz(p2)
end

function distance_3d(p1, p2)
	--return math.sqrt( (b.x-a.x)^2 + (b.z-a.z)^2 )
	return p1:distance_to(p2)
end

-- ###############################################################################################
--                                  UPDATE
-- ###############################################################################################

function PsiStormManager:update()
	if(device().precache_frame > 1) then
		return
	end
	if not(self.started) then
		local g_time = game.get_game_time()
		--local diff_p = math.floor(self._delta - g_time:diffSec(self.last_psi_storm_time))
		---self.atmosfear.debugMessages[10]:SetText("Next psi storm begins in "..tostring(diff_p).." seconds")
		--local diff_s = math.floor(self.surge_manager._delta - g_time:diffSec(self.surge_manager.last_surge_time))
		--self.atmosfear.debugMessages[11]:SetText("Next surge begins in "..tostring(diff_s).." seconds")
		if(self.time_forwarded) then
			local diff = math.abs(self._delta - g_time:diffSec(self.last_psi_storm_time))
			if(diff<3600) then
				self._delta = 3*3600+g_time:diffSec(self.last_psi_storm_time)
			end
			self.time_forwarded = false
		end
		--self.atmosfear.debugMessages[9]:SetText("diffSec= "..tostring(g_time:diffSec(self.last_psi_storm_time))..",  _delta="..tostring(self._delta))
		if(g_time:diffSec(self.last_psi_storm_time) < self._delta) then
			return
		end
		--if(xr_logic.pick_section_from_condlist(get_story_object("actor"), nil, self.condlist) ~= "true") then
			--return
		--end
		if not(self:get_nearest_cover()) then
			self:new_psi_storm_time(true)
			return
		end
		self:start()
		return
	end

	diff_sec = math.ceil(game.get_game_time():diffSec(self.inited_time)/level.get_time_factor())
	local actor_pos=db.actor:position()
	if(prev_sec~=diff_sec) then
		--self.atmosfear.debugMessages[1]:SetText("dif_sec: "..tostring(diff_sec))
		prev_sec = diff_sec
		local level_name = level.name()
		if(level_name=="labx8" or level_name=="jupiter_underground" or self.atmosfear.opt_enable_psi_storm==0) then
			self:finish()
			return
		end
		local cover = self:get_nearest_cover()
		if(cover==nil and self.count==0) then
			self:init_psi_storm_covers()
			return
		end
		if(diff_sec>=self.psi_storm_duration) then
			self:finish()
		else
			if(self.loaded) then
				self.loaded = false
			end
			-- psi storm begins -----------------------------------------------------------------------------------------------------------------------------------------
			if (diff_sec>=0) and (self.stages['beginning']==nil) then
				if (level.get_time_hours() >= 5 and level.get_time_hours() <= 20) then
					level.set_weather_fx("fx_psi_storm_day")
				else
					level.set_weather_fx("fx_psi_storm_night")
				end
				self.stages['beginning']=true
				--self.atmosfear.debugMessages[2]:SetText("psi storm launched at: "..tostring(diff_sec))
			end
			-- siren warning -----------------------------------------------------------------------------------------------------------------------------------------
			if (diff_sec>=22) and (self.stages['siren']==nil) and (self.atmosfear.opt_psi_storm_warning=="siren") then
				self:launch_rockets()
				self.surge_manager:play_siren_sound()
				self.stages['siren']=true
			end
			-- psi storm warning -----------------------------------------------------------------------------------------------------------------------------------------
			if (diff_sec>=24) and not(self.task_given) then
				if self.atmosfear.opt_psi_storm_task=="give" then
					self:give_psi_storm_hide_task()
				end
				self.task_given = true
				--self.atmosfear.debugMessages[2]:SetText("task given at: "..tostring(diff_sec))
			end
			-- psi storm main phase -----------------------------------------------------------------------------------------------------------------------------------------
			if (diff_sec>=40) and (diff_sec<=228) then
			--self.atmosfear.debugMessages[1]:SetText("dif_sec: "..tostring(diff_sec))
				if self.next_vortex_at == nil then
					self.next_vortex_at = diff_sec + math.random(self.vortex_period_min, self.vortex_period_max)
				end
				if self.next_vortex_at == diff_sec then
					self:vortex()
					self.next_vortex_at = diff_sec + math.random(self.vortex_period_min, self.vortex_period_max)
				end
				--self.atmosfear.debugMessages[3]:SetText("next_vortex_at: "..tostring(self.next_vortex_at))

			end
			for key,vortex in pairs(self.vortexes) do
				local life_time=diff_sec-vortex.start_time
				if life_time>=20 and vortex.hit==false then
					self:kill_crows_at_pos(vortex.sound_pos)
					self:spawn_artefact(vortex.sound_pos)
					if (self.atmosfear.opt_psi_storm_fate~="unhurt") then
						self:kill_obj_at_pos(vortex.sound_pos)
					end
					if (cover==nil or not(db.storage[cover].object:inside(db.actor:position()))) then
						self:vortex_actor_hit(vortex)
					end
					vortex.hit=true
				end
				if life_time>=25 then
					vortex=nil
				end
			end
		end
	end
	--[[
	diff_game_sec = math.ceil(game.get_game_time():diffSec(self.inited_time))
	if(prev_game_sec~=diff_game_sec) then
		prev_game_sec=diff_game_sec
		for key,vortex in pairs(self.vortexes) do
			local life_time=diff_game_sec-vortex.start_time*10
			if life_time>=200 and vortex.hit==false then
				self:create_light(key)
				self:kill_crows_at_pos(vortex.sound_pos)
				self:spawn_artefact(vortex.sound_pos)
				if (self.atmosfear.opt_psi_storm_fate~="unhurt") then
					self:kill_obj_at_pos(vortex.sound_pos)
				end
				if (cover==nil or not(db.storage[cover].object:inside(db.actor:position()))) then
					self:vortex_actor_hit(vortex)
				end
				vortex.hit=true
			end
			if life_time>=25 then
				--alife():release(self.lights[key], true)
				--self.lights[key]=nil
				vortex=nil
			end

		end
	end
	]]--
end


-- ###############################################################################################

function PsiStormManager:create_light(key)
	-- light
    self.lights[key] = alife():create("lights_hanging_lamp", self.vortexes[key].sound_pos, db.actor:level_vertex_id(), db.actor:game_vertex_id())
	local data = packet_utils21.get_object_data(self.lights[key])
	data.main_range = 80
	data.main_brightness = 1
	data.light_flags = "0x1e"
	data.main_cone_angle = 2
	--data.main_color_animator="crommcruac\\psi_storm_flash"
	--data.startup_animation=""
	packet_utils21.set_object_data(self.lights[key], data)
	--packet_utils21.print_object_data(data)
	self.lights[key].rewrite = {}
	self.lights[key].rewrite.direction = vector():set(-1.57, 0, 0)
end

function PsiStormManager:vortex()
	self.vortex_index=self.vortex_index+1
	local effect=particles_object("crommcruac\\psi_storm_01")
	local sound=sound_object("anomaly\\psi_storm_01")
	local actor_pos=db.actor:position()
	local angle_dec=math.random(0,359)
	local angle_rad=math.rad(angle_dec)
	local distance=math.random(0,self.vortex_distance_max)
	local pos_x=math.cos(angle_rad)*distance
	local pos_z=math.sin(angle_rad)*distance
	local particle_pos=vector():set(actor_pos.x+pos_x, actor_pos.y+20, actor_pos.z+pos_z)
	local sound_pos=vector():set(actor_pos.x+pos_x, actor_pos.y+60, actor_pos.z+pos_z)
	self.vortexes[self.vortex_index]={effect=effect, particle_pos=particle_pos,sound=sound, sound_pos=sound_pos, start_time=diff_sec, hit=false}
	--particle
	self.vortexes[self.vortex_index].effect:play_at_pos(self.vortexes[self.vortex_index].particle_pos)
	--sound
	if self.vortexes[self.vortex_index].sound ~= nil and self.vortexes[self.vortex_index].sound:playing() then
		self.vortexes[self.vortex_index].sound:stop()
	end
	if self.vortexes[self.vortex_index].sound ~= nil then
		self.vortexes[self.vortex_index].sound:play_at_pos(db.actor, self.vortexes[self.vortex_index].sound_pos)
		self.vortexes[self.vortex_index].sound.volume = 1
	end
end

function PsiStormManager:spawn_artefact(pos)
	local sum=0
	for artefact,prob in pairs(self.artifacts) do
		sum=sum+prob
	end
	local rnd=math.random()*sum
	local artefact_to_spawn
	for artefact,prob in pairs(self.artifacts) do
		artefact_to_spawn=artefact
		rnd=rnd-prob
		if (rnd<=0) then
			break
		end
	end
	local chance = math.random(1,100)/100
	--af_electra_flash 4000ru, af_dummy_dummy 12000, af_ice 18000, af_electra_moonlight 6000,af_cristall_flower 3000
	if chance <= artifact_chance then
		--self.atmosfear.debugMessages[9]:SetText(game.translate_string("st_"..artefact_to_spawn.."_name").." spawned")
		alife():create(artefact_to_spawn, pos, 0, 0, -1)
	else
		--self.atmosfear.debugMessages[9]:SetText("nothing spawned")
	end
end

function PsiStormManager:vortex_actor_hit(vortex)
	local hit_power=0
	local distance = distance_2d(db.actor:position(), vortex.particle_pos)
	--self.atmosfear.debugMessages[4]:SetText("distance="..tostring(distance))
	if distance < self.max_distance_psi_hit then
		hit_power=math.cos(distance * math.pi / self.max_distance_psi_hit)+1
		local h = hit()
		h.type = hit.telepatic
		h.power = self.atmosfear:hit_power(hit_power, h.type)
		h.impulse = 0
		h.direction = vector():set(0,0,1)
		h.draftsman = db.actor
		--self.atmosfear.debugMessages[11]:SetText("psi hit power="..tostring(h.power))
		if not(self.atmosfear.god_mode) then
			db.actor:hit(h)
		end
		level.remove_pp_effector(666)
		level.add_pp_effector("psi_fade.ppe", 666, false)
		level.set_pp_effector_factor(666,h.power)
	end
	if distance < self.max_distance_electro_hit then
		hit_power=math.cos(distance * math.pi / self.max_distance_electro_hit)+1
		local h = hit()
		h.type = hit.shock
		h.power = self.atmosfear:hit_power(hit_power, h.type)
		h.impulse = 0
		h.direction = vector():set(0,0,1)
		h.draftsman = db.actor
		--self.atmosfear.debugMessages[12]:SetText("electro hit power="..tostring(h.power))
		if not(self.atmosfear.god_mode) then
			db.actor:hit(h)
		end
		level.remove_pp_effector(667)
		level.add_pp_effector("electro_fade.ppe", 667, false)
		level.set_pp_effector_factor(667,h.power)
	end
end

function PsiStormManager:kill_obj_at_pos(pos)
	self.humanParticles={}
	local board = sim_board.get_sim_board()
	for k,v in pairs(board.squads) do
		local squad = v
		if(check_squad_level(squad.id)) then
			if(check_squad_community_and_story_id(squad.id)) then
				local squad_npcs = get_squad_members(squad.id)
				for kk,vv in pairs(squad_npcs) do
					local obj = alife():object(kk)
					if(obj and not(get_object_story_id(obj.id))) then
						if(check_squad_smart_props(squad.id)) then
							local cl_obj = level.object_by_id(obj.id)
							if cl_obj ~= nil then
								if distance_2d(pos, cl_obj:position())<self.max_distance_npc_hit then
									self.humanParticles[k.."_"..kk]=particles_object("crommcruac\\electrocute_human")
									self.humanParticles[k.."_"..kk]:play_at_pos(cl_obj:position())
									if self.atmosfear.opt_psi_storm_fate=="turntozombie" then
										self:turn_to_zombie(obj)
									else
										cl_obj:kill(cl_obj)
									end
								end
							else
								if distance_2d(pos, obj.position)<self.max_distance_npc_hit then
									self.humanParticles[k.."_"..kk]=particles_object("crommcruac\\electrocute_human")
									self.humanParticles[k.."_"..kk]:play_at_pos(obj:position())
									if self.atmosfear.opt_psi_storm_fate=="turntozombie" then
										self:turn_to_zombie(obj)
									else
										obj:kill()
									end
								end
							end
						else
							local release = true
							for i = 1,#self.covers do
								local sr = self.covers[i]
								if(sr and sr:inside(obj.position)) then
									release = false
								end
							end
							if(release) then
								local cl_obj = level.object_by_id(obj.id)
								if cl_obj ~= nil then
									if distance_2d(pos, cl_obj:position())<self.max_distance_npc_hit then
										self.humanParticles[k.."_"..kk]=particles_object("crommcruac\\electrocute_human")
										self.humanParticles[k.."_"..kk]:play_at_pos(cl_obj:position())
										if self.atmosfear.opt_psi_storm_fate=="turntozombie" then
											self:turn_to_zombie(obj)
										else
											cl_obj:kill(cl_obj)
										end
									end
								else
									if distance_2d(pos, obj.position)<self.max_distance_npc_hit then
										self.humanParticles[k.."_"..kk]=particles_object("crommcruac\\electrocute_human")
										self.humanParticles[k.."_"..kk]:play_at_pos(obj:position())
										if self.atmosfear.opt_psi_storm_fate=="turntozombie" then
											self:turn_to_zombie(obj)
										else
											obj:kill()
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	--self.debugMessages[10]:SetText("obj to kill:"..tostring(#self.objects_to_kill))
end

function PsiStormManager:turn_to_zombie(obj)
	local cl_obj = level.object_by_id(obj.id)
	local position
	local section
	local zombie_type
	if cl_obj ~= nil then
		position=cl_obj:position()
		section=cl_obj:section()
	else
		position=obj.position
		section=obj:section_name()
	end
	alife():release(alife():object(obj.id), true)
	local section_number = string.sub(section, -1)
	if section_number=="4" then
		zombie_type="sim_default_zombied_4"
	elseif section_number=="3" then
		zombie_type="sim_default_zombied_3"
	elseif section_number=="2" or section_number=="1" then
		zombie_type="sim_default_zombied_2"
	else
		zombie_type="sim_default_zombied_1"
	end
	alife():create(zombie_type, position, db.actor:level_vertex_id(), db.actor:game_vertex_id())
	--self.debugMessages[1]:SetText("type: "..tostring(zombie_type))
end

function PsiStormManager:kill_crows_at_pos(pos)
	self.crowParticles={}
	local h = hit()
	h.type = hit.fire_wound
	h.power = 1.0
	h.impulse = 0
	h.direction = vector():set(0,0,1)
	h.draftsman = db.actor
	for k,v in pairs(bind_crow.crow_storage) do
		local obj = alife():object(v)
		if obj then
			local crow = level.object_by_id(obj.id)
			if(crow and crow:alive() and distance_2d(pos, crow:position())<25) then
				--crow:start_particles("crommcruac\\electrocute_crow","bip01_pelvis")
				--self.crowParticles[k]=particles_object("crommcruac\\electrocute_crow")
				--self.crowParticles[k]:play_at_pos(crow:position())
				crow:hit(h)
			end
		end
	end
end

function PsiStormManager:launch_rockets()
	for k,v in pairs(db.signal_light) do
		if not(v:is_flying()) then
			v:launch()
		end
	end
end


function PsiStormManager:save(packet)
	set_save_marker(packet, "save", false, "PsiStorm")
	packet:w_bool(self.finished)
	packet:w_bool(self.started)
	utils.w_CTime(packet, self.last_psi_storm_time, "psi_storm")
	if(self.started) then
		utils.w_CTime(packet, self.inited_time, "psi_storm")
		packet:w_bool(self.task_given)
		packet:w_stringZ(self.psi_storm_message)
		packet:w_stringZ(self.psi_storm_task_sect)
		packet:w_u32(self.game_time_factor)
	end
	packet:w_u32(self._delta)
	set_save_marker(packet, "save", true, "PsiStorm")
end

function PsiStormManager:load(packet)
	set_save_marker(packet, "load", false, "PsiStorm")
	self:initialize()
	self.finished = packet:r_bool()
	self.started = packet:r_bool()
	self.last_psi_storm_time = utils.r_CTime(packet, "psi_storm")
	if(self.started) then
		self.inited_time = utils.r_CTime(packet, "psi_storm")
		self.task_given = packet:r_bool()
		self.psi_storm_message = packet:r_stringZ()
		self.psi_storm_task_sect = packet:r_stringZ()
		self.game_time_factor = packet:r_u32()
		self.stages={}
	end
	self._delta = packet:r_u32()
	self.loaded = true
	set_save_marker(packet, "load", true, "PsiStorm")
end

function PsiStormManager:give_psi_storm_hide_task()
	if(self.psi_storm_message~="empty") then
		local mess = ""
		if(self.psi_storm_message=="") then
			local time = 0
			mess = game.translate_string("hide_from_psi_storm_message")
		else
			mess = game.translate_string(self.psi_storm_message)
		end
	end
	if(self.psi_storm_task_sect~="empty") then
		if(self.psi_storm_task_sect=="") then
			task_manager.get_task_manager():give_task("hide_from_psi_storm")
		else
			task_manager.get_task_manager():give_task(self.psi_storm_task_sect)
		end
	end
end

function get_squad_members(squad_id)
	local npcs_tbl = {}
	local squad = alife():object(squad_id)
	if(squad) then
		for obj in squad:squad_members() do
			npcs_tbl[obj.id] = true
		end
	end
	return npcs_tbl
end

function check_squad_level(squad_id)
	local squad = alife():object(squad_id)
	if(squad) then
		local squad_level = alife():level_name(game_graph():vertex(squad.m_game_vertex_id):level_id())
		if(squad_level==level.name()) then
			return true
		end
	end
	return false	-- can't delete squad on other level
end

function check_squad_community_and_story_id(squad_id)
	local squad = alife():object(squad_id)
	if(squad) then
		if(immuned_to_surge_squads[squad.player_id]) then
			return false	-- can't delete squad immune to surge
		end
		if(get_object_story_id(squad.id)) then
			return false	-- can't delete squad with story id
		end
	end
	return true
end

function check_squad_community(squad_id)
	local squad = alife():object(squad_id)
	if(squad) then
		if(immuned_to_surge_squads[squad.player_id]) then
			return false	-- can't delete squad immune to surge
		end
	end
	return true
end

function check_squad_smart_props(squad_id)
	local squad = alife():object(squad_id)
	if(squad) then
		local board = sim_board.get_sim_board()
		if(board and squad.smart_id and board.smarts[squad.smart_id]) then
			local smart = board.smarts[squad.smart_id].smrt
			if(tonumber(smart.props["surge"])<=0) then
				return true
			end
		end
	end
	return false	-- can't delete squad in his smart if squad is in cover
end

function get_psi_storm_manager()
	if psi_storm_manager == nil then
		psi_storm_manager = PsiStormManager()
	end
	return psi_storm_manager
end

function is_started()
	local p = get_psi_storm_manager()
	return p.started
end

function is_finished()
	local m = get_psi_storm_manager()
	return m.finished == true
end

function actor_in_cover()
	local m = get_psi_storm_manager()
	local cover_id = m:get_nearest_cover()
	if (cover_id ~= nil) and (db.storage[cover_id].object:inside(db.actor:position())) then
		return true
	else
		return false
	end
end

function npc_in_cover(npc)
	local m = get_psi_storm_manager()
	local cover_id = m:get_nearest_cover_with_npc(npc)
	if (cover_id ~= nil) and (db.storage[cover_id].object:inside(npc:position())) then
		return true
	else
		return false
	end
end

function get_task_title()
	local title = ""
	local m = get_psi_storm_manager()
	if(actor_in_cover()) then
		title = "hide_from_psi_storm_name_2"
	else
		title = "hide_from_psi_storm_name_1"
	end
	return title
end

function get_task_descr()
	local descr = ""
	local m = get_psi_storm_manager()
	if(actor_in_cover()) then
		descr = game.translate_string("hide_from_psi_storm_descr_2_a")
	else
		descr = game.translate_string("hide_from_psi_storm_descr_1_a")
	end
	return descr
end

function get_task_target()
	local m = get_psi_storm_manager()
	if(actor_in_cover()) then
		return nil
	end
	return m:get_nearest_cover()
end

function PsiStormManager:createLight()
	local actor_pos=db.actor:position()
	local angle_dec=0
	local angle_rad=math.rad(angle_dec)
	local distance=5
	local pos_x=math.cos(angle_rad)*distance
	local pos_z=math.sin(angle_rad)*distance
	--local position=vector():set(actor_pos.x+pos_x, actor_pos.y+10, actor_pos.z+pos_z)
	local position=vector():set(actor_pos.x, actor_pos.y+60, actor_pos.z)
	local direction=vector():set(-1.57, 0, 0)
    local se_obj = alife():create("lights_hanging_lamp", position, db.actor:level_vertex_id(), db.actor:game_vertex_id())
	local data = packet_utils21.get_object_data(se_obj)

	data.main_range = 80
	data.main_brightness = 5
	--data.light_flags = "0x1e"
	data.main_cone_angle = 2
	data.main_color_animator="crommcruac\\psi_storm_flash"
	data.startup_animation=""
	packet_utils21.set_object_data(se_obj, data)
	packet_utils21.print_object_data(data)
	se_obj.rewrite = {}
	se_obj.rewrite.direction = direction
	--se_obj.rewrite.position = position

end

