--[[
	axr_beh.script
	Behavior Manager
	Alundaio

	Copyright (C) 2012 Alundaio
	This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
--]]

function on_game_start()
	load_scheme("axr_beh","beh",0)
	callback_register("scheme_set",set_scheme)
	callback_register("scheme_reset",reset_scheme)
end

local keep_state_min_time = 1000

local assoc_tbl = 	{
						idle = {		director = {"", "_eat_bread", "_eat_kolbasa", "_drink_vodka", "_drink_energy", "_weapon"},
										listener = {"", "_eat_bread", "_eat_kolbasa", "_drink_vodka", "_drink_energy", "_weapon"}},
						harmonica = {	director = {"_harmonica"},
										listener = {"", "_eat_bread", "_eat_kolbasa", "_drink_vodka", "_drink_energy", "_weapon"}},
						guitar = {		director = {"_guitar"},
										listener = {"", "_eat_bread", "_eat_kolbasa", "_drink_vodka", "_drink_energy", "_weapon"}},
						story = {		director = {"", "_weapon"},
										listener = {"", "_eat_bread", "_eat_kolbasa", "_drink_vodka", "_drink_energy", "_weapon"}},
					}

local camp_states = {
						["sit_ass"] = true,
						["sit_knee"] = true,
						["animpoint_stay_table"] = true,
						["animpoint_sit_low"] = true,
						["animpoint_sit_normal"] = true,
						["animpoint_sit_high"] = true,
						["animpoint_stay_wall"] = true
}
--------------------------------Action Base Evaluator ---------------------------------------------------------------------

class "evaluator_beh" (property_evaluator)
function evaluator_beh:__init(storage, name) super (nil, name)
	self.st = storage
end

function evaluator_beh:evaluate()
	return xr_logic.is_active(self.object, self.st)
end

--------------------------------------Action Base --------------------------------------------------------------------------------
class "action_beh" (action_base)
function action_beh:__init(npc_name, action_name, storage) super (nil, action_name)
	self.st = storage
end

function action_beh:initialize()
	action_base.initialize(self)
	self.st.assist_point = nil
	self.keep_state_until = time_global()
	self.st.approved_actions = {}
end

function action_beh:execute()
	action_base.execute(self)

	self:set_desired_distance()
	self:set_desired_behavior()
	self:set_desired_animation()

	if (self.st.behavior == "beh_move") then
		self:set_desired_target()
	end

	if (self.st.behavior and self.st.desired_target and next(self.st.desired_target)) then
		if (self.st.behavior == "beh_wait") then
			self:beh_wait()
		elseif (self.st.behavior == "beh_move" and not self.st.target == "waypoint") then
			self:beh_move()
		elseif (self.st.target == "waypoint") then
			self:beh_path()
		end
	end
end

function action_beh:set_desired_distance()
	local keep_distance = xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.keep_distance)
	self.st.desired_distance	= tonumber(xr_logic.pick_section_from_condlist(db.actor, self.object, self.st[keep_distance.."_desired_dist"]))
end

function action_beh:set_desired_behavior()
	self.st.behavior = xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.behavior_state,"behavior_state")
end

function action_beh:set_desired_animation()
	self.st.wait_animation 		= xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.wait_cond)
	self.st.walk_animation 		= xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.walk_cond)
	self.st.jog_animation 		= xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.jog_cond)
	self.st.run_animation 		= xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.run_cond)
	self.st.delay_animation 	= xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.delay_cond)
end

function action_beh:set_desired_target()
	local target = xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.goto_target)
	self.st.target = target
	if not (target) or (target == "") then
		self.st.desired_target = {}
		return
	end

	local t = {}
	local function set_position_data(id)
		local obj = level.object_by_id(id)
		local sobj = alife():object(id)
		if (obj) then
			t.level_vertex_id = obj:level_vertex_id()
			t.game_vertex_id = obj:game_vertex_id()
			t.position = obj:position()
			t.direction = obj:direction()
			t.object = sobj
		elseif (sobj) then
			t.level_vertex_id = sobj.m_level_vertex_id
			t.game_vertex_id = sobj.m_game_vertex_id
			t.position = sobj.position
			t.direction = self.object:position():sub(t.position)
			t.object = sobj
		end
	end
	local obj = get_story_object(target)
	if (obj) then
		set_position_data(obj:id())
	elseif (target == "enemy") then
		local st = db.storage[self.object:id()]
		local be = self.object:best_enemy() or st and st.enemy_id and level.object_by_id(st.enemy_id)
		if (be and be:alive()) then
			t.level_vertex_id = be:level_vertex_id()
			t.position = be:position()
			t.direction = self.object:position():sub(t.position)
			t.object = be
		end
	elseif (target == "waypoint") then
		t = self:get_current_waypoint()
	elseif (target == "commander") then
		local squad = get_object_squad(self.object)
		if not(squad:commander_id() == self.object:id()) then
			set_position_data(squad:commander_id())
		end
	elseif (string.find(target,"lvid:")) then
		local vid,pos
		for s in string.gmatch(target,"lvid:(%d+)") do
			vid = tonumber(s)
		end
		if (vid) then
			t.level_vertex_id = vid
			t.position = level.vertex_position(vid)
			t.direction = self.object:position():sub(t.position)
			t.object = nil
		end
	elseif (string.find(target,"id:")) then
		local id
		for s in string.gmatch(target,"id:(%w+)") do
			id = tonumber(s)
		end
		if (id) then
			set_position_data(id)
		end
	end
	self.st.desired_target = t
end

function action_beh:beh_wait()

	local new_state = self.st.desired_target.wait_animation
	local state = state_mgr.get_state(self.object)

	if (new_state and new_state ~= state) then
		local target = xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.goto_target)
		local lobj
		if (target and target ~= "") then
			if (target ~= "enemy") then
				lobj = get_story_object(target)
			else
				local st = db.storage[self.object:id()]
				local be = self.object:best_enemy() or st and st.enemy_id and level.object_by_id(st.enemy_id)
				lobj = be and be:alive() and self.object:see(be) and be
			end
		end
		state_mgr.set_state(self.object, new_state,nil, nil, {look_object = lobj })
	end
end

function action_beh:set_state()
	local new_state
	local dist_walk	= tonumber(xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.walk_dist))
	local dist_jog 	= tonumber(xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.jog_dist))
	local t = time_global()

	if t >= self.keep_state_until then
		self.keep_state_until = t + keep_state_min_time
		if (self.dist_to_assist_pt <= dist_walk ) then
			new_state = self.st.walk_animation
		elseif (self.dist_to_assist_pt <= dist_jog ) then
			new_state = self.st.jog_animation
		else
			new_state = self.st.run_animation
		end
	end

	local state = state_mgr.get_state(self.object)
	if (new_state and new_state ~= state) then
		state_mgr.set_state(self.object, new_state,nil, nil, nil, { animation = true })
	end
end

class "position_node"
function position_node:__init(amt)
	self.node = {}
	for i=1,amt do
		self.node[i] = {}
	end
end

function position_node:select_best_vertex_id(object,dir,lvid,distance)
	local closest
	for i=1, #self.node do
		if	(bit_and(i,1)) then
			self.node[i].desired_direction = vector_rotate_y(dir, -math.random(50,60))
		else
			self.node[i].desired_direction = vector_rotate_y(dir, math.random(50,60))
		end

		self.node[i].vertex_id = level.vertex_in_direction(lvid, self.node[i].desired_direction, distance)

		if (self.node[i].vertex_id and object:accessible(self.node[i].vertex_id)) then
			self.node[i].distance = self.node[i].vertex_id == lvid and -1 or object:position():distance_to_sqr(level.vertex_position(self.node[i].vertex_id))

			if not (closest) then
				closest = self.node[i].vertex_id
			end

			if (self.node[i-1] and self.node[i-1].distance < self.node[i].distance) then
				closest = self.node[i-1].vertex_id
			end
		end
	end
	return closest and closest ~= -1 and closest
end

function action_beh:beh_move()
	if not (self.st.desired_target.position) then
		return
	end

	if (self.st.desired_target.object and not simulation_objects.is_on_the_same_level(self.object,self.st.desired_target.object)) then
		local gvid = self.st.desired_target.game_vertex_id or self.st.desired_target.object.m_game_vertex_id
		self.object:set_dest_game_vertex_id(gvid)
	else
		local select_new_pt = false
		local target

		local dist_from_self_to_goto_target = self.object:position():distance_to(self.st.desired_target.position)
		local dist_from_assist_pt_to_goto_target

		if ( self.st.assist_point ) then
			dist_from_assist_pt_to_goto_target = level.vertex_position(self.st.assist_point):distance_to(self.st.desired_target.position)
		end

		if (( dist_from_self_to_goto_target >= self.st.desired_distance ) and
		 (not dist_from_assist_pt_to_goto_target or
			dist_from_assist_pt_to_goto_target >= self.st.desired_distance * 2)) then
			select_new_pt = true
		end

		if ( select_new_pt ) then
			local node = position_node(2)
			self.st.assist_point = node:select_best_vertex_id(self.object,self.st.desired_target.direction,self.st.desired_target.level_vertex_id,self.st.desired_distance)
			if (not self.st.assist_point) then
				return
			end
		elseif not ( self.st.assist_point ) then
			return
		end

		self.object:set_dest_level_vertex_id(self.st.assist_point)
		self.object:set_desired_position(level.vertex_position(self.st.assist_point))
	end
	self.object:set_path_type(game_object.level_path)
	self.object:set_desired_direction()
	self.dist_to_assist_pt = level.vertex_position(self.st.assist_point):distance_to(self.object:position())
	--self.dist_from_self_to_goto_target = dist_from_self_to_goto_target
	self:set_state()
end

function action_beh:beh_path()
	if not (self.st.desired_target.level_vertex_id) then
		return
	end

	local next_index = self:next_waypoint_index()
	if (self.object:level_vertex_id() ~= self.st.desired_target.level_vertex_id) or ((next_index) and (not self.st.desired_target.delay or self.st.desired_target.delay == 0)) then
		self.st.am_i_reached = nil
		if (self.object:level_vertex_id() == self.st.desired_target.level_vertex_id) then
			self:increment_waypoint_index()
			self.st.desired_target = self:get_current_waypoint()
			if not (self.st.desired_target.level_vertex_id) then
				return
			end
		end
		self.object:set_path_type(game_object.level_path)
		self.object:set_desired_direction()
		self.object:set_dest_level_vertex_id(self.st.desired_target.level_vertex_id)
		--self.object:set_desired_position(self.st.desired_target.position)
		local pos = self.object:position()
		pos = vector():set(pos.x,self.st.desired_target.position.y,pos.z)
		self.dist_to_assist_pt = pos:distance_to(self.st.desired_target.position)
		self:set_state()
		return
	end

	self.st.am_i_reached = true

	if not (self.st.desired_target.delay) then
		self.st.desired_target.delay = 0
	end

	local tg = time_global()

	if not (self.st.wait_delay) then
		self.st.wait_delay = tg + self.st.desired_target.delay
	end

	if (tg > self.st.wait_delay) then
		self:increment_waypoint_index()
		return
	end

	local state = state_mgr.get_state(self.object)
	local new_state = self.st.desired_target.delay_animation or self.st.delay_animation

	if (self.st.use_camp and camp_states[new_state]) then
		--[[
		self:fill_approved_actions(new_state)

		self.camp = sr_camp.get_current_camp(self.object:position())
		if (self.camp and not self.in_camp) then
			self.camp:register_npc(self.object:id())
			self.in_camp = true
		end

		if (self.in_camp) then
			local camp_action, is_director = self.camp and self.camp:get_camp_action(self.object:id())
			if (camp_action) then

				local tbl = is_director and assoc_tbl[camp_action].director or assoc_tbl[camp_action].listener
				local descr = new_state == "sit_knee" and "sit_ass" or new_state

				local t = {}
				local found
				for i=1,#tbl do
					for n=#self.st.approved_actions, 1, -1 do
						if (self.st.approved_actions[n].name == descr..tbl[i]) then
							table.insert(t,self.st.approved_actions[n].name)
							found = true
						end
					end
				end

				local anim = found and t[math.random(#t)]
				if (anim and anim ~= "") then
					if (self.st.desired_target.animpoint) then
						alun_utils.printf("camp_action = %s",anim)
						state_mgr.set_state(self.object, anim, nil, nil, nil, {animation_position = self.st.desired_target.animpoint, animation_direction = self.st.desired_target.animpoint_dir})
					else
						state_mgr.set_state(self.object, anim)
					end
					return
				end
			end
		end
		--]]
	elseif (self.in_camp) then
		self.camp:unregister_npc(self.object:id())
		self.in_camp = nil
	else
		local sound = self.st.desired_target.sound_idle or xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.sound_idle)
		if (sound and sound ~= "nil") then
			xr_sound.set_sound_play(self.object:id(), sound)
		end
	end

	if (new_state and new_state ~= state) then
		if (self.st.desired_target.animpoint) then
			state_mgr.set_state(self.object, new_state,nil, nil,{look_object = self.st.desired_target.look_object, look_position = self.st.desired_target.look_position }, {animation_position = self.st.desired_target.animpoint, animation_direction = self.st.desired_target.animpoint_dir})
			if (new_state == "zat_b106_wounded_idle") then
				local mgr = db.storage[self.object:id()].state_mgr
				if (mgr) then
					mgr.animation:set_state(nil,true)
					mgr.animation:set_control()
				end
			end
		else
			state_mgr.set_state(self.object, new_state,nil, nil,{look_object = self.st.desired_target.look_object, look_position = self.st.desired_target.look_position })
		end
	end
end

function am_i_reached(npc,index)
	local st = npc and db.storage[npc:id()]
	if (index) then
		return st and st.active_scheme == "beh" and st.beh.am_i_reached and st.beh.path_index == index
	end
	return st and st.active_scheme == "beh" and st.beh.am_i_reached
end

function angle_dir(ang)
	return vector():setHP(ang.y,ang.x):normalize()
end

function action_beh:get_current_waypoint()
	local st = db.storage[self.object:id()]
	local str = alun_utils.read_from_ini(st.ini,st.active_section,"pt"..self.st.path_index,"string",nil)
	if not (str) then
		return {}
	end

	if (self.st.desired_target and self.st.path_index == self.st.desired_target.index and st.active_section == self.st.desired_target.active_section) then
		return self.st.desired_target
	end

	local t = {}

	t.index = self.st.path_index
	t.active_section = st.active_section

	for s in string.gmatch(str,"look:([-]?%d+[.]?%d*,[-]?%d+[.]?%d*,[-]?%d+[.]?%d*)") do
		local p = alun_utils.str_explode(s,",")
		t.look_position = vector():set(tonumber(p[1]),tonumber(p[2]),tonumber(p[3]))
	end

	for s in string.gmatch(str,"animpoint:(.%S+)") do
		local p = alun_utils.str_explode(s,",")
		t.animpoint = vector():set(tonumber(p[1]),tonumber(p[2]),tonumber(p[3]))
		p[4] = p[4] and tonumber(p[4]) or 0
		p[5] = p[5] and tonumber(p[5]) or 0
		p[6] = p[6] and tonumber(p[6]) or 0
		t.animpoint_dir = vector():set(p[4],p[5],p[6])
	end

	for s in string.gmatch(str,"sig:(.%S+)") do
		t.sig = s
	end

	for s in string.gmatch(str,"sound_idle:(.%S+)") do
		t.sound_idle = s
	end

	for s in string.gmatch(str,"look_object:(.%S+)") do
		if (s ~= "enemy") then
			t.look_object = get_story_object(s)
		else
			local st = db.storage[self.object:id()]
			local be = self.object:best_enemy() or st and st.enemy_id and level.object_by_id(st.enemy_id)
			t.look_object = be and be:alive() and self.object:see(be) and be
		end
	end

	for s in string.gmatch(str,"look_job:(.%S+)") do
		s = alun_utils.str_explode(s,",")
		local board = sim_board.get_sim_board()
		local smart = s[1] and board and board.smarts_by_names[s[1]]
		local obj = smart and smart.npc_by_job_section["logic@"..s[2]]
		obj = obj and level.object_by_id(obj)
		if (obj) then
			t.look_object = obj
			--t.look_position = obj:bone_position("bip01_neck")
		end
	end

	local a = string.find(str,"look:") or string.find(str,"look_object:") or string.find(str,"look_job:")
	if (a) then
		str = string.sub(str,1,a-1)
	end

	local a = string.find(str,"animpoint:")
	if (a) then
		str = string.sub(str,1,a-1)
	end

	local a = string.find(str,"sig:")
	if (a) then
		str = string.sub(str,1,a-1)
	end

	local a = string.find(str,"sound_idle:")
	if (a) then
		str = string.sub(str,1,a-1)
	end

	local pt = alun_utils.str_explode(str,",")

	t.level_vertex_id = tonumber(pt[1])
	t.position = level.vertex_position(t.level_vertex_id)
	t.direction = self.object:position():sub(t.position)
	t.delay = pt[2] and tonumber(pt[2]) or 0
	t.delay_animation = pt[3]
	return t
end

function action_beh:next_waypoint_index()
	local st = db.storage[self.object:id()]
	local inc = self.st.path_reverse and -1 or 1
	local next_index = alun_utils.read_from_ini(st.ini,st.active_section,"pt"..self.st.path_index+inc,"string",nil)
	return next_index
end

function action_beh:increment_waypoint_index()
	local st = db.storage[self.object:id()]

	local inc = self.st.path_reverse and -1 or 1
	local next_index = alun_utils.read_from_ini(st.ini,st.active_section,"pt"..self.st.path_index+inc,"string",nil)

	if (next_index) then
		self.st.am_i_reached = nil
		self.st.path_index = self.st.path_index + inc
		if (self.st.path_reverse and self.st.path_index == 1) then
			self.st.path_reverse = nil
		end
	else
		local new_section = xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.path_end)
		if (new_section and new_section ~= "nil") then
			if (new_section == "reverse") then
				self.st.path_reverse = true
			elseif (new_section ~= "loop") then
				xr_logic.switch_to_section(self.object, st.ini, new_section)
				self.st.am_i_reached = nil
				self.st.path_index = 1
			else
				self.st.path_index = 1
			end
		end
	end

	if (self.st.desired_target.sig) then
		self.st.signals[self.st.desired_target.sig] = true
	end

	self.st.wait_delay = nil
	alun_utils.save_var(self.object,"path_index",self.st.path_index)
end

function action_beh:fill_approved_actions(state)
	for i=#self.st.approved_actions, 1, -1 do
		self.st.approved_actions[i] = nil
	end

	if (state == "sit_knee") then
		state = "sit_ass"
	end

	self.st.description = state

	local t = { "eat_bread", "drink_energy", "drink_vodka", "eat_kolbasa", "guitar", "harmonica", "weapon" }
	for i=1, 6 do
		if (axr_beh["can_"..t[i]] and axr_beh["can_"..t[i]](self.object)) then
			table.insert(self.st.approved_actions, { name = state.."_"..t[i] })
		end
	end
end

function action_beh:finalize()
	action_base.finalize(self)
	if (self.in_camp) then
		self.camp:unregister_npc(self.object:id())
		self.in_camp = nil
	end
	alun_utils.save_var(self.object,"path_index",1)
end

--
-------------------------- Scheme Handlers ------------------------------------------------------------

beh_evid =  188111
beh_actid = 188111

function add_to_binder(npc, ini, scheme, section, storage)
	local manager = npc:motivation_action_manager()
	-- evaluators
	manager:add_evaluator(beh_evid, this.evaluator_beh(storage, "evaluator_beh"))

	local new_action = this.action_beh(npc, "action_beh", storage)
	new_action:add_precondition(world_property(stalker_ids.property_anomaly,false))
	new_action:add_precondition(world_property(stalker_ids.property_alive, true))
	new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
	new_action:add_precondition(world_property(beh_evid, true))
	new_action:add_precondition(world_property(xr_gather_items.evaid,false))
	new_action:add_precondition(world_property(xr_evaluators_id.corpse_exist,false))
	new_action:add_precondition(world_property(stalker_ids.property_danger,false))
	--new_action:add_precondition(world_property(stalker_ids.property_danger_grenade, false))

	xr_motivator.addCommonPrecondition(new_action)

	new_action:add_effect(world_property(beh_evid, false))
	new_action:add_effect(world_property(xr_evaluators_id.state_mgr + 4, false))
	manager:add_action(beh_actid, new_action)

	xr_logic.subscribe_action_for_events(npc, storage, new_action)

	new_action = manager:action(xr_actions_id.alife)
	new_action:add_precondition(world_property(beh_evid, false))

	new_action = manager:action(xr_actions_id.state_mgr + 2)
	new_action:add_precondition(world_property(beh_evid, false))
end

function disable_scheme(npc,scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end

function add_common_precondition(action)
	--action:add_precondition(world_property(beh_evid, false))
end

function set_scheme(npc,ini,scheme,section)
	local st = xr_logic.assign_storage_and_bind(npc,ini,"beh",section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	init_custom_data(npc, ini, section, st, "beh")
end

function reset_scheme(npc,scheme,section,st)
	init_custom_data(npc, st.ini, section, st.beh, scheme)
end

------------------- CUSTOM DATA LOGIC ------------------------------------------
function init_custom_data(npc, ini, section, st, scheme)
	local def = {}

	def.behavior_state 	= "{+npcx_beh_wait} beh_wait, {+npcx_beh_patrol_mode !is_squad_commander} beh_move, {+npcx_beh_patrol_mode} beh_patrol, beh_move"
	def.goto_target 	= "{!is_squad_commander} commander, actor"

	def.walk_dist 		= "{+npcx_beh_patrol_mode} 90, 5"
	def.jog_dist 		= "{+npcx_beh_patrol_mode} 150, 10"

	def.keep_distance 	= "{+npcx_beh_distance_far} far, near"

	def.near_desired_dist 	= "{+npcx_beh_patrol_mode =is_squad_commander} 1, {!is_squad_commander} 2, 3"
	def.far_desired_dist	= "{+npcx_beh_patrol_mode =is_squad_commander} 1, {!is_squad_commander} 2, 8"

	def.wait_cond 	= "{+npcx_beh_substate_stealth} hide, guard"
	def.walk_cond 	= "{+npcx_beh_patrol_mode -npcx_beh_substate_stealth} patrol,{+npcx_beh_substate_stealth} sneak, patrol"
	def.jog_cond 	= "{+npcx_beh_substate_stealth} sneak_run, rush"
	def.run_cond 	= "{+npcx_beh_substate_stealth} rush, assault"

	def.delay_cond	= "{+npcx_beh_substate_stealth} hide, guard"

	def.use_camp_cond = "false"

	st.behavior_state 	= xr_logic.parse_condlist(npc, section, "behavior_state",		utils.cfg_get_string(ini, section, "behavior_state", npc, false, "", 	def.behavior_state))
	st.goto_target		= xr_logic.parse_condlist(npc, section, "target", 			utils.cfg_get_string(ini, section, "target", npc, false, "", 	def.goto_target))

	st.walk_dist 		= xr_logic.parse_condlist(npc, section, "walk_dist", 			utils.cfg_get_string(ini, section, "walk_dist", npc, false, "", 	def.walk_dist))
	st.jog_dist 		= xr_logic.parse_condlist(npc, section, "jog_dist", 			utils.cfg_get_string(ini, section, "jog_dist", npc, false, "", 	def.jog_dist))

	st.keep_distance	= xr_logic.parse_condlist(npc, section, "keep_distance", 		utils.cfg_get_string(ini, section, "keep_distance", npc, false, "", 	def.keep_distance))

	st.near_desired_dist= xr_logic.parse_condlist(npc, section, "near_desired_dist", 	utils.cfg_get_string(ini, section, "near_desired_dist", npc, false, "", 	def.near_desired_dist))
	st.far_desired_dist = xr_logic.parse_condlist(npc, section, "far_desired_dist", 	utils.cfg_get_string(ini, section, "far_desired_dist", npc, false, "", 	def.far_desired_dist))

	st.wait_cond 		= xr_logic.parse_condlist(npc, section, "wait_anim", 	utils.cfg_get_string(ini, section, "wait_anim", npc, false, "", 	def.wait_cond))
	st.walk_cond 		= xr_logic.parse_condlist(npc, section, "walk_anim", 	utils.cfg_get_string(ini, section, "walk_anim", npc, false, "", 	def.walk_cond))
	st.jog_cond 		= xr_logic.parse_condlist(npc, section, "jog_anim",	 	utils.cfg_get_string(ini, section, "jog_anim", npc, false, "", 	def.jog_cond))
	st.run_cond			= xr_logic.parse_condlist(npc, section, "run_anim", 	utils.cfg_get_string(ini, section, "run_anim", npc, false, "", 	def.run_cond))

	st.delay_cond 		= xr_logic.parse_condlist(npc, section, "delay_anim", 	utils.cfg_get_string(ini, section, "delay_anim", npc, false, "", def.delay_cond))

	st.signals 			= {}
	st.path_end 		= xr_logic.parse_condlist(npc, section, "path_end", 	utils.cfg_get_string(ini, section, "path_end", npc, false, "", "nil" ))
	st.path_index 		= alun_utils.load_var(npc,"path_index",1)
	st.wait_delay		= nil
	st.am_i_reached 	= nil

	st.use_camp  		= utils.cfg_get_bool(ini, section, "use_camp",npc, false, false)
	st.sound_idle		= xr_logic.parse_condlist(npc, section, "sound_idle", 	utils.cfg_get_string(ini, section, "sound_idle", npc, false, "", "nil"))
end

function can_eat_bread(npc)
	local t = { "bread" }
	for i=1,#t do
		if (npc:object(t[i])) then
			return true
		end
	end
	return false
end

function can_drink_energy(npc)
	local t = { "energy" }
	for i=1,#t do
		if (npc:object(t[i])) then
			return true
		end
	end
	return false
end

function can_drink_vodka(npc)
	local t = { "vodka" }
	for i=1,#t do
		if (npc:object(t[i])) then
			return true
		end
	end
	return false
end

function can_eat_kolbasa(npc)
	local t = { "kolbasa" }
	for i=1,#t do
		if (npc:object(t[i])) then
			return true
		end
	end
	return false
end

function can_harmonica(npc)
	local t = { "harmonica_a" }
	for i=1,#t do
		if (npc:object(t[i])) then
			return true
		end
	end
	return false
end

function can_guitar(npc)
	local t = {"guitar_a"}
	for i=1,#t do
		if (npc:object(t[i])) then
			return true
		end
	end
	return false
end

function can_weapon(npc)
	return npc:best_weapon()
end
