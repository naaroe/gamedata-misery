--[[
************************************************************
					xrs_debug_tools
by Alundaio
************************************************************

Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
--]]

local show_game_graph = false
local developer_debug = true
local spawn_all_items_on_actor = false
local position_file = ""

local keybinds
local actions_by_stalker_ids
local Enable

local hud_display_top
local hud_display_left
local hud_display_right
function on_game_load()
	local ini = ini_file("debug\\xrs_debug_tools.ltx")
	Enable = alun_utils.read_from_ini(ini,"plugin","enable","bool",false,"xrs_debug_tools")
	if not (Enable) then return end

	actor_info = {}
	keybinds = {}

	actions_by_stalker_ids = {}
	for k,v in pairs(_G.xr_actions_id) do
		actions_by_stalker_ids[v] = k
	end
	actions_by_stalker_ids[7] = "action_accomplish_task"
	actions_by_stalker_ids[16] = "action_aim_enemy"
	actions_by_stalker_ids[88] = "action_alife_planner"
	actions_by_stalker_ids[90] = "action_anomaly_planner"
	actions_by_stalker_ids[89] = "action_combat_planner"
	actions_by_stalker_ids[9] = "action_communicate_with_customer"
	actions_by_stalker_ids[36] = "action_critically_wounded"
	actions_by_stalker_ids[73] = "action_danger_by_sound_planner"
	actions_by_stalker_ids[85] = "action_danger_grenade_look_around"
	actions_by_stalker_ids[72] = "action_danger_grenade_planner"
	actions_by_stalker_ids[86] = "action_danger_grenade_search"
	actions_by_stalker_ids[82] = "action_danger_grenade_take_cover"
	actions_by_stalker_ids[84] = "action_danger_grenade_take_cover_after_explosion"
	actions_by_stalker_ids[83] = "action_danger_grenade_wait_for_explosion"
	actions_by_stalker_ids[80] = "action_danger_in_direction_detour"
	actions_by_stalker_ids[79] = "action_danger_in_direction_hold_position"
	actions_by_stalker_ids[78] = "action_danger_in_direction_look_out"
	actions_by_stalker_ids[71] = "action_danger_in_direction_planner"
	actions_by_stalker_ids[81] = "action_danger_in_direction_search"
	actions_by_stalker_ids[77] = "action_danger_in_direction_take_cover"
	actions_by_stalker_ids[91] = "action_danger_planner"
	actions_by_stalker_ids[75] = "action_danger_unknown_look_around"
	actions_by_stalker_ids[70] = "action_danger_unknown_planner"
	actions_by_stalker_ids[76] = "action_danger_unknown_search"
	actions_by_stalker_ids[74] = "action_danger_unknown_take_cover"
	actions_by_stalker_ids[0] = "action_dead"
	actions_by_stalker_ids[87] = "action_death_planner"
	actions_by_stalker_ids[25] = "action_detour_enemy"
	actions_by_stalker_ids[1] = "action_dying"
	actions_by_stalker_ids[15] = "action_find_ammo"
	actions_by_stalker_ids[13] = "action_find_item_to_kill"
	actions_by_stalker_ids[2] = "action_gather_items"
	actions_by_stalker_ids[24] = "action_get_distance"
	actions_by_stalker_ids[12] = "action_get_item_to_kill"
	actions_by_stalker_ids[17] = "action_get_ready_to_kill"
	actions_by_stalker_ids[23] = "action_hold_position"
	actions_by_stalker_ids[19] = "action_kill_enemy"
	actions_by_stalker_ids[29] = "action_kill_enemy_if_not_visible"
	actions_by_stalker_ids[37] = "action_kill_if_enemy_critically_wounded"
	actions_by_stalker_ids[35] = "action_kill_if_player_on_the_path"
	actions_by_stalker_ids[33] = "action_kill_wounded_enemy"
	actions_by_stalker_ids[22] = "action_look_out"
	actions_by_stalker_ids[14] = "action_make_item_killing"
	actions_by_stalker_ids[3] = "action_no_alife"
	actions_by_stalker_ids[34] = "action_post_combat_wait"
	actions_by_stalker_ids[32] = "action_prepare_wounded_enemy"
	actions_by_stalker_ids[8] = "action_reach_customer_location"
	actions_by_stalker_ids[6] = "action_reach_task_location"
	actions_by_stalker_ids[30] = "action_reach_wounded_enemy"
	actions_by_stalker_ids[20] = "action_retreat_from_enemy"
	actions_by_stalker_ids[92] = "action_script"
	actions_by_stalker_ids[26] = "action_search_enemy"
	actions_by_stalker_ids[4] = "action_smart_terrain_task"
	actions_by_stalker_ids[5] = "action_solve_zone_puzzle"
	actions_by_stalker_ids[28] = "action_sudden_attack"
	actions_by_stalker_ids[21] = "action_take_cover"
	actions_by_stalker_ids[95] = "script_combat_planner"
	actions_by_stalker_ids[96] = "reach_task_location"
	actions_by_stalker_ids[142] = "corpse_exist"
	actions_by_stalker_ids[147] = "wounded_exist"
	actions_by_stalker_ids[192] = "state_mgr"
	actions_by_stalker_ids[193] = "state_mgr_to_idle_combat"
	actions_by_stalker_ids[194] = "state_mgr_to_idle_alife"
	actions_by_stalker_ids[195] = "state_mgr_to_idle_items"
	actions_by_stalker_ids[307] = "smartcover_action"
	actions_by_stalker_ids[343] = "meet_contact"
	actions_by_stalker_ids[3865] = "action_walker"
	actions_by_stalker_ids[188112] = "kill_wounded"
	actions_by_stalker_ids[188111] = "beh"
	actions_by_stalker_ids[90005] = "gather_items"

	local sect = "plugin"
	local developer_debug = alun_utils.read_from_ini(ini,"plugin","developer_debug","bool",false)
	show_game_graph = alun_utils.read_from_ini(ini,"plugin","show_game_graph","bool",false)
	spawn_all_items_on_actor = alun_utils.read_from_ini(ini,"plugin","spawn_all_items_on_actor","bool",false)
	position_file = alun_utils.read_from_ini(ini,"plugin","file_save_position_info","string","positional_info.txt")

	keybinds = 	{
					["spawn_all_items"] = alun_utils.read_from_ini(ini,"plugin","keybind_spawn_all_items","string","A"),
					["debug_ui"] = alun_utils.read_from_ini(ini,"plugin","keybind_debug_ui","string","S"),
					["debug_ui_nearest_stalker"] = alun_utils.read_from_ini(ini,"plugin","keybind_debug_ui_nearest_stalker","string","F1"),
					["debug_ui_spawn_position"] = alun_utils.read_from_ini(ini,"plugin","keybind_debug_ui_spawn_position","string","F2"),
					["print_position"] = alun_utils.read_from_ini(ini,"plugin","keybind_print_position","string","P"),
					["toggle_top_hud"] = alun_utils.read_from_ini(ini,"plugin","keybind_toggle_top_hud","string","F1"),
					["toggle_left_hud"] = alun_utils.read_from_ini(ini,"plugin","keybind_toggle_left_hud","string","F2"),
					["toggle_right_hud"] = alun_utils.read_from_ini(ini,"plugin","keybind_toggle_right_hud","string","F3")
				}

	if (developer_debug) then
		_G.dev_debug = true
		_G.log = alun_utils.printf
		_G.abort = alun_utils.printf
		_G.sim_debug = true
	end

	-- HUD DISPLAYS
	hud_display_top = hud_tool("cs_debug")
	hud_display_left = hud_tool("cop_debug")
	hud_display_right = hud_tool("cop2_debug")

	if (spawn_all_items_on_actor) then
		spawn_items.main()
	end

	debug_game_graph_loaded = xr_logic.pstor_retrieve(db.actor,"debug_game_graph_loaded",nil)
	if (show_game_graph and not debug_game_graph_loaded) then
		local gg = game_graph()
		for gvid=0,933 do
			if gg:valid_vertex_id(gvid) then
				local vertex = gg:vertex(gvid)

				local level_name = alife():level_name(vertex:level_id())

				local lvid = vertex:level_vertex_id()

				local pos = vertex:level_point()

				if (not debug_game_graph_loaded) then
					local obj = alife():create("medkit", pos, lvid, gvid)
					level.map_add_object_spot_ser(obj.id, "alife_combat", level_name.." Gvid:"..gvid)
				end
			end
		end

		xr_logic.pstor_store(db.actor,"debug_game_graph_loaded",true)
	end
end

------------------------------------------------------------------------
-- Class to create hud tools
class "hud_tool"
function hud_tool:__init(custom_static)
	local hud = get_hud()
	self.hud = hud:GetCustomStatic(custom_static)
	if not (self.hud) then
		hud:AddCustomStatic(custom_static, true)
		self.hud = hud:GetCustomStatic(custom_static)
	end
	self.header = ""
	self.msg = ""
end

function hud_tool:add_msg(text,value)
	self.msg = self.msg..str_format(text..": %s\\n",value)
end

function hud_tool:set_header(header)
	self.header = header
end

function hud_tool:display(disable)
	if (self.hud) and not (disable) then
		self.hud:wnd():TextControl():SetText(self.msg)
		self.msg = self.header and self.header .."\\n" or ""
	end
end

function hud_tool:clear()
	if (self.hud) then
		self.hud:wnd():TextControl():SetText("")
	end
end

---------------------------------------------------------------------------------------------------------
-- HOW TO CREATE YOUR OWN HUD TOOL
--[[ Steps:

1. Add tool name to the toggle rotation for either top hud or left hud. ( ie. { "my_hud" } )
2. create a show() function with hud name as prefix_ ( ie. local function my_hud_show() )
3. use the add_msg() class function to add text to your new hud. ( ie. hud:add_msg("Variable",value) )
4. call display() class function.	( ie. hud:display() )
5. Optionally set header display ( ie. hud:set_header("-[My Hud Info]-") )

--]]
---------------------------------------------------------------------------------------------------------

local toggle_hud_list = 	{
							["top"]  = { "stalker_info_hud","stalker_data_hud","position_other_hud","squad_info_hud"},
							["left"] = { "weapon_hud", "enemy_hud", "anim_hud", "behavior_hud"},
							["right"] = { "position_hud","planner_hud","wounded_hud","corpse_hud"}
							}
--------------------------------------------------------------------------------------------------


-- Callback main_menu_on_keyboard
local toggle_left_key = 1
local toggle_top_key = 1
local toggle_right_key = 1
local debug_ui
function main_menu_on_keyboard(dik,keyboard_action,main_menu)
	if not (Enable) then
		return
	end
	if keyboard_action ~= ui_events.WINDOW_KEY_RELEASED then return end
	if (keybinds["print_position"] and dik == DIK_keys["DIK_"..keybinds["print_position"]]) then
		if (db.actor) then
			local lvid, gvid = db.actor:level_vertex_id(), db.actor:game_vertex_id()
			local pos = db.actor:position()
			local dir = device().cam_dir
			local pos2 = level.vertex_position(lvid)
			local valid = pos2:distance_to(pos) <= 0.7
			local function write_file(text,...)
				if not text then return end
				local debug_file = io.open(position_file,"a+")

				if ( debug_file == nil ) then
					debug_mode = false
					return
				end

				local i = 0
				local p = {...}
				local function sr(a)
					i = i + 1
					return tostring(p[i])
				end
				local output = string.gsub(text,"%%s",sr)

				debug_file:write(output.."\n")

				debug_file:close()

				get_console():execute("load ~#I#:"..output)
			end
			write_file("position 		= %s,%s,%s",pos.x,pos.y,pos.z)
			write_file("level_vertex_id = %s",lvid)
			write_file("game_vertex_id 	= %s",gvid)
			write_file("direction 		= %s,%s,%s",dir.x,dir.y,dir.z)
			write_file("direction HP 	= %s,%s",dir:getH(),dir:getP())
			write_file("valid 			= %s",valid)
			write_file("","")
		end
	elseif (keybinds["spawn_all_items"] and dik == DIK_keys["DIK_"..keybinds["spawn_all_items"]]) then
		spawn_items.main()
	elseif (keybinds["toggle_top_hud"] and dik == DIK_keys["DIK_"..keybinds["toggle_top_hud"]]) then
		if ( toggle_top_key < #toggle_hud_list["top"]) then
			toggle_top_key = toggle_top_key + 1
		else
			toggle_top_key = 1
		end
			printf("TOP HUD = %s",toggle_hud_list["top"][toggle_top_key])
	elseif keybinds["toggle_left_hud"] and dik == DIK_keys["DIK_"..keybinds["toggle_left_hud"]] then
		if ( toggle_left_key < #toggle_hud_list["left"]) then
			toggle_left_key = toggle_left_key + 1
		else
			toggle_left_key = 1
		end
		printf("LEFT HUD = %s",toggle_hud_list["left"][toggle_left_key])
	elseif keybinds["toggle_right_hud"] and dik == DIK_keys["DIK_"..keybinds["toggle_right_hud"]] then
		if ( toggle_right_key < #toggle_hud_list["right"]) then
			toggle_right_key = toggle_right_key + 1
		else
			toggle_right_key = 1
		end
		printf("right HUD = %s",toggle_hud_list["right"][toggle_right_key])
	elseif keybinds["debug_ui"] and dik == DIK_keys["DIK_"..keybinds["debug_ui"]] then
		if not (debug_ui) then
			debug_ui = ui_debug_main and ui_debug_main.debug_ui(main_menu,keybinds)
		end

		if (debug_ui) then
			debug_ui:ShowDialog(true)
			main_menu:HideDialog()
			main_menu:Show(false)
		end
	end
end

local draw_debug_hud = true
function set_draw_debug_hud(val)
	hud_display_top:clear()
	hud_display_left:clear()
	hud_display_right:clear()
	draw_debug_hud = val
end

-- ACTOR UPDATE
local dtimer = 0
LastCameraPos = nil
function on_actor_update()
	if not (Enable) then
		return
	end

	if (debug_god) then
		db.actor.health = 1
		db.actor.bleeding = 0
		db.actor.psy_health = 1
		db.actor.radiation = 0
		db.actor.power = 1
	end

	if (crow_fun) then
		local crow = level.object_by_id(crow_fun)
		db.actor:set_actor_position(crow:position())
	end

	local cam_pos = device().cam_pos
	if (cam_pos and db.actor:position():distance_to_sqr(cam_pos) > 5) then
		LastCameraPos = cam_pos
	end

	local tg = time_global()
	if (tg < dtimer) then
		return
	end

	dtimer = tg + 250

	local disable_draw = alun_utils.load_var(db.actor,"disable_debug_draw",nil)
	if (disable_draw) then
		hud_display_top:clear()
		hud_display_left:clear()
		hud_display_right:clear()
		return
	end

	local top_hud = toggle_hud_list["top"][toggle_top_key]
	local left_hud = toggle_hud_list["left"][toggle_left_key]
	local right_hud = toggle_hud_list["right"][toggle_right_key]

	if not(top_hud) or not(left_hud) then return end

	_G["xrs_debug_tools"][top_hud.."_show"](hud_display_top)
	_G["xrs_debug_tools"][left_hud.."_show"](hud_display_left)
	_G["xrs_debug_tools"][right_hud.."_show"](hud_display_right)
end

-- NPC target for hud display ( nil = off )
local DEBUG_NPC
function set_debug_npc(id)
	if (id) then
		local npc = level.object_by_id(id)
		DEBUG_NPC = npc
		return
	end
	DEBUG_NPC = nil
	return
end

function get_debug_npc()
	if (DEBUG_NPC) then
		return DEBUG_NPC
	end

	local obj = get_target_at_cursor()
	if (obj) and IsStalker(obj) then
		return obj
	end
end

function get_target_at_cursor()
	if (level.get_target_obj) then
		return level.get_target_obj()
	end
end

function position_other_hud_show(hud)
	local obj = DEBUG_NPC or get_target_at_cursor() or alun_utils.get_nearest_stalker("cam",500)

	hud:set_header("-[Pos. Info]-")
	if (obj) then
		local lvid, gvid = obj:level_vertex_id(), obj:game_vertex_id()
		local pos = obj:position()
		local dir = obj:direction()
		local angle = alife():object(obj:id()).angle
		local pos2 = level.vertex_position(lvid)
		local valid = pos2:distance_to(pos) <= 0.7

		hud:add_msg("Name",obj:name())
		local dist = level.get_target_dist and level.get_target_dist()
		if (dist) then
			hud:add_msg("Distance",string.format("%0.3f",dist))
		end
		hud:add_msg("Lvid",lvid)
		hud:add_msg("Gvid",gvid)
		hud:add_msg("Pos",string.format("%0.3f, %0.3f, %0.3f", pos.x, pos.y, pos.z))
		hud:add_msg("Dir",string.format("%0.3f, %0.3f, %0.3f HP (%0.3f, %0.3f)", dir.x, dir.y, dir.z,dir:getH(),dir:getP()))
		hud:add_msg("Angle",angle and string.format("%0.3f, %0.3f, %0.3f", angle.x, angle.y, angle.z))
		hud:display()
	end
end

function wounded_hud_show(hud)
	local obj = get_debug_npc() or alun_utils.get_nearest_stalker("cam",500)
	hud:set_header("-[Wound Info]-")
	if (obj) then
		hud:add_msg("Name",obj:name())
		local st = db.storage[obj:id()]
		if (st) then
			local tg = time_global()
			if (xr_wounded.is_wounded(obj)) then
				hud:add_msg("help_wounded helper id",st.wounded_already_selected)
			end

			if (st.help_wounded) then
				local vo = st.help_wounded.selected_id and level.object_by_id(st.help_wounded.selected_id)
				hud:add_msg("help_wounded Victim",vo and vo:name())
				hud:add_msg("help_wounded Vertex",st and st.help_wounded.vertex_id)
				hud:add_msg("help_wounded Stage",st and st.help_wounded.stage)
			end
			if (st.kill_wounded) then
				local vo = st.kill_wounded.current_id and level.object_by_id(st.kill_wounded.current_id)
				hud:add_msg("kill_wounded Victim",vo and vo:name())
				hud:add_msg("kill_wounded Timer",st.kill_wounded.timer and st.kill_wounded.timer - tg)
				hud:add_msg("kill_wounded Weapon",st.kill_wounded.weapon and st.kill_wounded.weapon:name())
			end

			if (st.victim_surrender) then
				local po = level.object_by_id(st.victim_surrender)
				hud:add_msg("Surrender to",po and po:name())
			end
		end
	end
	hud:display()
end


local stalker_id
local stalker_data = {}

function stalker_data_hud_show(hud)
	local obj = get_debug_npc() or alun_utils.get_nearest_stalker("cam",500)
	hud:set_header("-[Stalker Packet Data]-")
	if (obj) then
		if (stalker_id ~= obj:id()) then
			stalker_id = obj:id()
			local se_obj = alife():object(stalker_id)
			alun_utils.switch_offline(se_obj.id)
			stalker_data = stpk_utils.get_stalker_data(se_obj)
			alun_utils.switch_online(se_obj.id)
		end
		hud:add_msg("Character Name",stalker_data.character_name)
		hud:add_msg("Spec Char",stalker_data.specific_character)
		hud:add_msg("Profile",stalker_data.character_profile)
		hud:add_msg("Money",stalker_data.money)
		hud:add_msg("Community Index",stalker_data.community_index)
		hud:add_msg("Reputation",stalker_data.reputation)
		hud:add_msg("Rank",stalker_data.rank)
		hud:add_msg("trader_unk1_u8",stalker_data.cse_alife_trader_abstract__unk1_u8)
		hud:add_msg("trader_unk2_u8",stalker_data.cse_alife_trader_abstract__unk2_u8)
		hud:add_msg("unk1_f32",stalker_data.cse_alife_object__unk1_f32)
		hud:add_msg("unk2_u32",stalker_data.cse_alife_object__unk2_u32)
		hud:add_msg("unk3_u32",stalker_data.cse_alife_object__unk3_u32)
		hud:add_msg("Skeleton",stalker_data.skeleton_name)
		hud:add_msg("Skel. Flag",stalker_data.skeleton_flag)
		hud:add_msg("Source ID",stalker_data.source_id)
		hud:add_msg("Custom Data",stalker_data.custom_data)
		hud:add_msg("Visual",stalker_data.visual_name)
		hud:add_msg("Vis. Flags",stalker_data.visual_flags)
		hud:add_msg("team,squad,group",string.format("%d, %d, %d", stalker_data.g_team, stalker_data.g_squad, stalker_data.g_group))
		--[[
		hud:add_msg("Out Rest.",#stalker_data.dynamic_out_restrictions)
		for k,v in ipairs(stalker_data.dynamic_out_restrictions) do
			hud:add_msg(k,v)
		end
		hud:add_msg("In Rest.",#stalker_data.dynamic_in_restrictions)
		for k,v in ipairs(stalker_data.dynamic_in_restrictions) do
			hud:add_msg(k,v)
		end
		--]]
		hud:add_msg("Equip. Pref.",#stalker_data.equipment_preferences)
		for k,v in ipairs(stalker_data.equipment_preferences) do
			hud:add_msg(k,v)
		end
		--hud:add_msg("Equipment Pref.",stalker_data.equipment_preferences)
		hud:add_msg("Weapon Pref.",#stalker_data.weapon_preferences)
		for k,v in ipairs(stalker_data.weapon_preferences) do
			hud:add_msg(k,v)
		end
		hud:add_msg("Out Rest.",stalker_data.base_out_restrictors)
		hud:add_msg("In Rest.",stalker_data.base_in_restrictors)
	end
	hud:display()
end

local function r_seq(count, stpk)
	local seq = {}

	for i = 1, count do
		seq[i] = stpk:r_stringZ()
	end

	return seq
end

function planner_hud_show(hud)
	local obj = get_debug_npc() or alun_utils.get_nearest_stalker("cam",500)
	hud:set_header("-[Planner Info]-")
	if (obj) then
		local manager = obj.motivation_action_manager and obj:motivation_action_manager()
		if (manager) then
			local combat_action = manager:action(stalker_ids.action_combat_planner)
			local combat_action_planner = cast_planner(combat_action)

			hud:add_msg("Name",obj:name())

			local actid = manager:current_action_id()
			local name = actions_by_stalker_ids[actid] or "script"
			hud:add_msg("Mgr. Act",name)
			hud:add_msg("Mgr. Act ID",manager:current_action_id())

			actid = combat_action_planner:current_action_id()
			name = actions_by_stalker_ids[actid] or "script"
			hud:add_msg("Combat Act",name)
			hud:add_msg("Combat Act ID",combat_action_planner:current_action_id())

			local st = db.storage[obj:id()]
			if (st) then
				local sm = st.state_mgr
				hud:add_msg("alife",sm.alife)
				hud:add_msg("combat",sm.combat)
				if (sm.eval_states) then
					hud:add_msg("Weapon Locked",post_combat_idle.weapon_locked(obj))
					hud:add_msg("Animstate Locked",sm.eval_states[sm.properties["animstate_locked"]])
					hud:add_msg("Animation Locked",sm.eval_states[sm.properties["animation_locked"]])
					hud:add_msg("Movement",sm.eval_states[sm.properties["movement"]])
					hud:add_msg("Animstate",sm.eval_states[sm.properties["animstate"]])
					hud:add_msg("Animation",sm.eval_states[sm.properties["animation"]])
					hud:add_msg("Smartcover",sm.eval_states[sm.properties["smartcover"]])
				end
			end
		end
	end
	hud:display()
end

function position_hud_show(hud)
	local pos = db.actor:position()
	local cam
	if (pos:distance_to_sqr(device().cam_pos) > 25) then
		cam = true
		pos = device().cam_pos
	end

	local lvid = cam and level.vertex_id(pos) or db.actor:level_vertex_id()
	local gvid = cam and nil or db.actor:game_vertex_id()

	local dir = device().cam_dir
	local pos2 = level.vertex_position(lvid)
	local valid = pos2:distance_to(pos) <= 0.7

	local se_actor = not cam and alife():object(db.actor:id())

	hud:set_header("-[Actor Info]-")
	hud:add_msg("Lvid",lvid)
	hud:add_msg("Gvid",gvid)
	hud:add_msg("Pos",string.format("%0.4f, %0.4f, %0.4f", pos.x, pos.y, pos.z))
	hud:add_msg("Dir",string.format("%0.3f, %0.3f, %0.3f HP = %0.3f, %0.3f", dir.x, dir.y, dir.z,dir:getH(),dir:getP()))
	hud:add_msg("Angle",se_actor and se_actor.angle and string.format("%0.3f, %0.3f, %0.3f", se_actor.angle.x, se_actor.angle.y, se_actor.angle.z))
	hud:add_msg("Valid",valid)
	hud:add_msg("FOV",math.floor(device().fov))

	local Y, M, D, h, m, s, ms
	Y, M, D, h, m, s, ms = game.get_game_time():get( Y, M, D, h, m, s, ms )
	hud:add_msg("GameTime",string.format("Y:%d M:%d D:%d h:%d m:%d s:%d ms:%d",Y, M, D, h, m, s, ms))
	hud:display()
end

function squad_info_hud_show(hud)
	local near = get_debug_npc() or alun_utils.get_nearest_stalker("cam",500)
	if (near) then
		local st = db.storage[near:id()]
		if (st) then
			local squad = get_object_squad(near)
			if not(squad) then return end
			local smart = squad.smart_id and alife():object(squad.smart_id):name()
			local current_target = squad.current_target_id and alife():object(squad.current_target_id):name()
			local assigned_target = squad.assigned_target_id and alife():object(squad.assigned_target_id):name()

			hud:add_msg("Section Name",squad:section_name())
			hud:add_msg("ID",squad.id)
			hud:add_msg("Behavior Community",squad.player_id)
			hud:add_msg("Smart",smart)
			hud:add_msg("Current Target",current_target)
			hud:add_msg("Assigned Target",assigned_target)
		end
	end
	hud:set_header("-[Squad Info]-")
	hud:display()
end

function stalker_info_hud_show(hud)
	local near = get_debug_npc() or alun_utils.get_nearest_stalker("cam",500)

	local st = near and db.storage[near:id()]
	if (st) then
		local sobj = alife():object(near:id())

		hud:add_msg("Section Name",sobj:section_name())
		hud:add_msg("ID",near:id())
		--hud:add_msg("Name",near:name())
		hud:add_msg("Community",character_community(near))
		hud:add_msg("Rank",ranks.get_obj_rank_name(near))
		hud:add_msg("Visual",near:get_visual_name())
		hud:add_msg("Health",math.floor(near.health*100))
		hud:add_msg("FOV",near:fov())
		hud:add_msg("Range",near:range())
		local sight_type = near:sight_params()
		hud:add_msg("Sight Type",sight_type and sight_type.m_sight_type)
		hud:add_msg("SID",get_object_story_id(near:id()))
		hud:add_msg("A.Scheme",st.active_scheme)
		hud:add_msg("A.Section",st.active_section)
		hud:add_msg("Logic",st.section_logic)
		hud:add_msg("Ini",st.ini_filename)

		local pt_index = near.get_current_point_index and near:get_current_point_index()
		if (not pt_index or pt_index == 4294967296 ) then
			pt_index = st.active_scheme and (st.active_scheme == "camper" or st.active_scheme == "beh") and alun_utils.load_var(near,"path_index",nil)
		end
		hud:add_msg("PT index",pt_index)
		--[[
		local smart = xr_gulag.get_npc_smart(near)
		if (smart) then
			local npc_job
			for k,v in pairs(smart.npc_info) do
				hud:add_msg("Job",smart.job_data[v.job_id].section)
			end
		end
		--]]
	end

	hud:set_header("-[Stalker Info]-")
	hud:display()
end

function enemy_hud_show(hud)
	local near = get_debug_npc() or alun_utils.get_nearest_stalker("cam",500)
	if (near) then
		local id = near:id()
		local se_obj = alife():object(id)
		local st = db.storage[id]
		if (st) then
			local be = near:best_enemy()
			hud:add_msg("Section Name", se_obj:section_name())
			local relation = { [game_object.enemy] = "enemy",
								[game_object.friend] = "friend",
								[game_object.neutral] = "neutral"
			}
			hud:add_msg("Actor Relation",relation[near:relation(db.actor)])

			if (st.overrides and st.overrides.combat_ignore) then
				hud:add_msg("CombatIgnoreCond",xr_logic.pick_section_from_condlist(be, near, st.overrides.combat_ignore.condlist))
			end

			hud:add_msg("Combat Type",st.script_combat_type)

			if (be) then
				hud:add_msg("Best Enemy",be and be:name())
			end

			local ene = st.enemy_id and level.object_by_id(st.enemy_id)
			if (ene) then
				hud:add_msg("Enemy",ene and ene:name())
			end

			local tg = time_global()
			if (st.post_combat_wait) then
				hud:add_msg("Post Combat Wait",st.post_combat_wait.timer and st.post_combat_wait.timer-tg)
			end

			hud:add_msg("Memory Time",be and tg - near:memory_time(be))

			local combat_inertion = be and tg - near:memory_time(be)
			hud:add_msg("Combat Inertion",combat_inertion)
			hud:add_msg("Search Time",st.combat_ignore and st.combat_ignore.search_time)
			hud:add_msg("Combat Run",st.combat_ignore and st.combat_ignore.combat_run)

			local squad = get_object_squad(near)
			local cid = squad and squad.id or id
			if (xr_combat_ignore.safe_zone_npcs and xr_combat_ignore.safe_zone_npcs[cid]) then
				hud:add_msg("In no-combat zone",tg-xr_combat_ignore.safe_zone_npcs[cid])
			end

			local bd = near:best_danger()

			if (bd) then
				local danger_types = {

					[danger_object.grenade] 		= "grenade",
					[danger_object.entity_corpse] 	= "entity_corpse",
					[danger_object.entity_attacked] = "entity_attacked",
					[danger_object.attacked] 		= "attacked",
					[danger_object.bullet_ricochet] = "bullet_ricochet",
					[danger_object.enemy_sound] 	= "enemy_sound",
					[danger_object.attack_sound] 	= "attack_sound",
					[danger_object.entity_death] 	= "entity_death",
					[danger_object.hit]				= "hit",
					[danger_object.sound]			= "sound",
					[danger_object.visual]			= "visual"
				}
				local bdname = bd:object() and bd:object():name()
				local bddname = bd:dependent_object() and bd:dependent_object():name()
				local bd_type = bd:type()

				hud:add_msg("Danger",bdname)
				hud:add_msg("Dependent",bddname)
				hud:add_msg("Type",danger_types[bd_type])
				hud:add_msg("DangerMode",st.danger_flag)
				hud:add_msg("Inertion",st.danger.inertion_time)
				if (xr_danger.DangerIgnore) then
					local src = xr_danger.DangerIgnore[danger_types[bd_type]]
					local ignore_distance = xr_logic.pick_section_from_condlist(db.actor,near,xr_logic.parse_condlist(near,danger_types[bd_type],"danger_object",src))
					ignore_distance = tonumber(ignore_distance)
					hud:add_msg("Ignore Distance",ignore_distance)
				end
				local scripted = xr_danger.is_danger_scripted and xr_danger.is_danger_scripted(near)
				hud:add_msg("Scripted",scripted)
			end
		end
	end
	hud:set_header("-[Enemy Info]-")
	hud:display()
end

function anim_hud_show(hud)
	local near = get_debug_npc() or alun_utils.get_nearest_stalker("cam",500)
	if (near) then
		local st = db.storage[near:id()]
		if (st) then
			local sobj = alife():object(near:id())

			if (st.active_scheme == "animpoint") then
				local avail_animations = ""
				if st and st.animpoint then
					if st.animpoint.avail_animations then
						for k, v in pairs(st.animpoint.avail_animations) do
							avail_animations = avail_animations .. "," .. v
						end
					end

					local approved_actions = ""
					local description = st and st.animpoint and st.animpoint.description
					local avail_actions = description and xr_animpoint_predicates.associations[description]
					local actions = ""
					if avail_actions then
						for k,v in pairs(avail_actions) do
							if (v.predicate(near:id(), st.animpoint.use_camp)) then
								approved_actions = v.name .. ", " .. approved_actions
							end
							actions = v.name .. ", " .. actions
						end
					end

					hud:add_msg("Section Name",sobj:section_name())
					hud:add_msg("Avail. Animations",avail_animations)
					hud:add_msg("Avail. Actions",actions)
					hud:add_msg("Approved Actions",approved_actions)
					hud:add_msg("Cover Name",st.animpoint.cover_name)
					hud:add_msg("Use Camp",st.animpoint.use_camp)
					hud:add_msg("Description",description)
					hud:add_msg("Smart Direction",st.animpoint.smart_direction and alun_utils.vector_to_string(st.animpoint.smart_direction))
				end
			elseif (st.active_scheme == "walker") then
				local avail_actions = xr_animpoint_predicates.associations["walker_camp"]
				local actions = ""
				local approved_actions = ""
				if avail_actions then
					for k,v in pairs(avail_actions) do
						actions = actions .. "," .. v.name
						if (v.predicate(near:id())) then
							approved_actions = v.name .. "," .. approved_actions
						end
					end
				end

				hud:add_msg("Section Name",sobj:section_name())
				hud:add_msg("Use Camp",st and st.walker and st.walker.use_camp)
				hud:add_msg("Avail. Actions",actions)
				hud:add_msg("Approved Actions",approved_actions)
				hud:add_msg("Def. State Mov.",st and st.walker and st.walker.suggested_state.moving)
				hud:add_msg("Def. State Stand.", st and st.walker and st.walker.suggested_state.standing)
			end

			hud:add_msg("In Cover",near:in_smart_cover())

			local cover = near:get_dest_smart_cover_name()
			hud:add_msg("Dest Cover",cover)
			hud:add_msg("UseSmartCoverOnly",near:use_smart_covers_only())
		end
	end
	hud:set_header("-[Anim Info]-")
	hud:display()
end

function behavior_hud_show(hud)
	local near = get_debug_npc() or alun_utils.get_nearest_stalker("cam",500)
	if (near) then
		local st = db.storage[near:id()].beh
		if (st) then
			local target = st.desired_target and st.desired_target.object and st.desired_target.object:name()
			local target_type = st.target
			local pos = st.desired_target and st.desired_target.position and vec_to_str(st.desired_target.position)
			local beh = st.desired_behavior
			local assist_pt = st.assist_point
			local state = st.last_state

			hud:add_msg("Target",target)
			hud:add_msg("Type",target_type)
			hud:add_msg("Pos",pos)
			hud:add_msg("Behavior",beh)
			hud:add_msg("Assist Pt",assist_pt)
			hud:add_msg("State",state)
			hud:add_msg("State",state)
			st = db.storage[near:id()]
			hud:add_msg("PT Index",st.beh and st.beh.path_index)
			hud:add_msg("PT wait",st.beh and st.beh.wait_delay and st.beh.wait_delay - time_global())
			hud:add_msg("PT reached",st.beh and st.beh.am_i_reached ~= nil)
			hud:add_msg("Gather Items",st.gather_items and st.gather_items.gather_items_enabled and xr_logic.pick_section_from_condlist(db.actor, near, st.gather_items.gather_items_enabled))
			hud:add_msg("Loot Corpses",st.corpse_detection and st.corpse_detection.corpse_detection_enabled and xr_logic.pick_section_from_condlist(db.actor, near, st.corpse_detection.corpse_detection_enabled))
		end
	end
	hud:set_header("-[Beh Info]-")
	hud:display()
end

function weapon_hud_show(hud)
	local near = get_debug_npc() or alun_utils.get_nearest_stalker("cam",500)
	local wpn
	if (near) then
		wpn = near:active_item()
	else
		near = db.actor
		wpn = db.actor:active_item()
	end

	if (wpn == nil or not alun_utils.item_is_fa(wpn)) then
		return
	end

	local sobj = alife():object(wpn:id())
	local data = stpk_utils.get_weapon_data(sobj)

	if (wpn and data) then
		local sec = wpn:section()
		hud:add_msg("Weapon",sec)
		hud:add_msg("Visual",data.visual_name)
		hud:add_msg("Visual Flag",data.visual_flags)
		local ef_main_weapon_type = alun_utils.read_from_ini(nil,sec,"ef_main_weapon_type","string","nil")
		hud:add_msg("ef_main_weapon_type",ef_main_weapon_type)
		local ef_weapon_type = alun_utils.read_from_ini(nil,sec,"ef_weapon_type","string","nil")
		hud:add_msg("ef_weapon_type",ef_weapon_type)
		hud:add_msg("Condition",data.condition and math.floor(data.condition*100))
		hud:add_msg("Upgrades",alun_utils.str_explode(data.upgrades,","))
		hud:add_msg("Weapon State",data.weapon_state)
		hud:add_msg("AmmoCurrent",data.ammo_current)
		hud:add_msg("AmmoClip",data.ammo_elapsed)
		hud:add_msg("AddonFlag",data.addon_flags)
		hud:add_msg("AmmoType",data.ammo_type)
		hud:add_msg("XZ1",data.xz1)
	end

	hud:set_header("-[Weapon Info]-")
	hud:display()
end


function corpse_hud_show(hud)
	local corpses = release_body_manager.get_release_body_manager().release_objects_table

	local id
	local obj
	hud:add_msg("Count",#corpses)
	for i=1,#corpses do
		id = corpses[i].id
		obj = id and level.object_by_id(id)
		if (obj) then
			hud:add_msg("",obj:name().."  HasLoot = "..tostring(xr_corpse_detection.has_valuable_loot(obj)).."  DeathTime = "..time_global()-obj:death_time())
		end
	end
	hud:set_header("-[Release Table]-")
	hud:display()
end

function get_debug_hud()
	return debug_ui
end

--[[	Misc. Functions
--]]

function printf(text,...)
	get_console():execute("load ~#I#:"..str_format(text,...))
end

function str_format(text,...)
	if not (text) then return end
	local i = 0
	local p = {...}
	return string.gsub(text,"%%s",function(a) i = i + 1 return tostring(p[i]) end)
end

function give_game_news(t,d)
	if db.actor then
		db.actor:give_game_news("",t,"ui_iconsTotal_grouping",0,d,0)
	end
end
