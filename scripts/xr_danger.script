----------------------------------------------------------------------------------------------------------------------
-- xr_danger
-- re-written by Alundaio
-- Now accounts for time in danger mode instead of being in danger mode forever until scheme switched
-- AI Additions by Rulix

-- If Using Individually from AI Tweaks
-- Dependencies:
-- ai_tweaks/xr_danger.ltx
-- alun_utils.script
-- axr_main.script (Optional)
----------------------------------------------------------------------------------------------------------------------

local ini = ini_file("ai_tweaks\\xr_danger.ltx")
DangerInertion = alun_utils.collect_section(ini,"danger_inertion",true)
DangerIgnore = alun_utils.collect_section(ini,"danger_object",true)
DangerSoundThreshold = alun_utils.collect_section(ini,"sound_threshold",true)
ini = nil

local bd_types = {

	[danger_object.grenade] 		= "grenade",
	[danger_object.entity_corpse] 	= "entity_corpse",
	[danger_object.entity_attacked] = "entity_attacked",
	[danger_object.attacked] 		= "attacked",
	[danger_object.bullet_ricochet] = "bullet_ricochet",
	[danger_object.enemy_sound] 	= "enemy_sound",
	[danger_object.attack_sound] 	= "attack_sound",
	[danger_object.entity_death] 	= "entity_death",
	[danger_object.hit]				= "hit",
	[danger_object.sound]			= "sound",
	[danger_object.visual]			= "visual"
}

function on_game_start()
	local t,p = {},{}
	for k, v in pairs(DangerSoundThreshold) do
		p = alun_utils.str_explode(v,",")
		t[k] = {}
		for i=1,#p do
			t[k][i] = tonumber(p[i])
		end
	end
	DangerSoundThreshold = t
	callback_register("npc_on_hit_callback",npc_on_hit_callback)
	callback_register("monster_on_hit_callback",npc_on_hit_callback)
	callback_register("npc_on_hear_callback",npc_on_hear_callback)
	callback_register("actor_torch_active",actor_torch_active)
	--callback_register("npc_on_update",npc_on_update)
end

---------------------
-- npc_on_update(npc,st)
---------------------
function npc_on_update(npc,st)
	if not (axr_main.actor_light) then
		return
	end

	if (db.actor:see(npc) and npc_in_actor_frustrum(npc) and db.actor:position():distance_to_sqr(npc:position()) < 2500) then
		set_script_danger(npc,2000)
	end
end

-------------------
-- npc_on_hear_callback(npc,who,s_type,sound_power)
-------------------
function npc_on_hear_callback(npc,who_id,s_type,dist,sound_power)
	if not (xr_combat_ignore.npc_in_safe_zone(npc)) then
		local who = who_id and level.object_by_id(who)
		if (who) then
			if (xr_combat_ignore.ignore_enemy_by_overrides(npc,who)) then
				return
			end

			if not (xr_wounded.is_wounded(npc)) then
				if (IsStalker(who)) then
					s_type = string.lower(s_type)
					--alun_utils.printf("SCRIPT DANGER sound_threshold= %s,%s,%s",DangerSoundThreshold[s_type][1],DangerSoundThreshold[s_type][2],DangerSoundThreshold[s_type][3])
					if (DangerSoundThreshold[s_type] and dist <= DangerSoundThreshold[s_type][2]) then
						if (DangerSoundThreshold[s_type][3] == 1 and npc:relation(who) == game_object.enemy) or (DangerSoundThreshold[s_type][3] == 0) then
							if (s_type == "wpn_hit" and npc:relation(who) ~= game_object.enemy) then
								set_script_danger(npc,8000)
							else
								set_script_danger(npc,DangerSoundThreshold[s_type][1] or 5000)
							end
							--alun_utils.printf("xr_hear: trigger script danger %s",s_type)
						end
					end
				else
					if (string.find(s_type,"MST")) then
						if (dist < 1000) then
							set_script_danger(npc,15000)
						end
					end
				end
			end
			--npc:enable_memory_object(who,true)
		end
	end
end

-------------------
-- npc_on_hit_callback(npc,amount,local_direction,who,bone_index)
-------------------
function npc_on_hit_callback(npc,amount,local_direction,who,bone_index)
	if (npc and amount > 0 and bone_index ~= "from_death_callback") then
		set_script_danger(npc,2000)
	end
end

local mem_danger = {}
local script_danger = {}

function is_danger_scripted(npc)
	if not (npc) then return end
	return script_danger[npc:id()] and script_danger[npc:id()].val ~= nil
end

function set_script_danger(npc,time)
	local id = npc:id()
	script_danger[id] = {danger_time = time_global(), danger_inertion = time}
	mem_danger[id] = nil
end

function is_danger(npc)
	local id,tg = npc:id(),time_global()
	local function set_danger(val)
		mem_danger[id] = {tim = tg+500,val = val}
		return val
	end
	if mem_danger[id] and mem_danger[id].tim > tg then
		return mem_danger[id].val
	end
	local script
	if script_danger[id] and script_danger[id].danger_time + script_danger[id].danger_inertion > tg then
		script = true
	else
		script_danger[id] = nil
	end

	local best_danger = npc:best_danger()

	if best_danger == nil then
		return set_danger(false)
	end

	local best_danger_object = best_danger:object()
	local bd_type = best_danger:type()

	if bd_type ~= danger_object.grenade and best_danger:dependent_object() ~= nil then
		best_danger_object = best_danger:dependent_object()
	end

	if not (best_danger_object) then
		return set_danger(false)
	end

	if not script then
		if (not best_danger_object) or (not best_danger_object:alive()) then
			return set_danger(false)
		end

		if bd_type == danger_object.grenade then
			if character_community(npc) == "zombied" then
				return set_danger(false)
			end
		end

		if not xr_combat_ignore.is_enemy(npc, best_danger_object,true) then
			return set_danger(false)
		end

		if bd_type ~= danger_object.entity_corpse and bd_type ~= danger_object.grenade and bd_type ~= danger_object.bullet_ricochet and
			npc:relation(best_danger_object) ~= game_object.enemy
		then
			return set_danger(false)
		end

		if bd_type == danger_object.entity_corpse then
			return set_danger(false)
		end

		if (not best_danger_object:alive()) then
			return set_danger(false)
		end

		local src = DangerIgnore[bd_types[bd_type]]--utils.cfg_get_string(ini,"danger_object",bd_types[bd_type],npc,false,"","0")
		local ignore_distance = xr_logic.pick_section_from_condlist(db.actor,npc,xr_logic.parse_condlist(npc,bd_types[bd_type],"danger_object",src))
		ignore_distance = tonumber(ignore_distance)

		if (ignore_distance) then
			if (ignore_distance < 1) then
				return set_danger(false)
			end

			local danger_distance_sqr = best_danger:position():distance_to_sqr(npc:position())
			if (danger_distance_sqr >= ignore_distance) then
				return set_danger(false)
			end
		end

		if xr_wounded.is_heavy_wounded_by_id(id) then
			return set_danger(false)
		end
	end

	if (xr_help_wounded.is_under_help_wounded(npc) and bd_type ~= danger_object.grenade) then
		return set_danger(false)
	end

	if (xrs_kill_wounded and xrs_kill_wounded.is_under_kill_wounded(npc) and bd_type ~= danger_object.grenade) then
		return set_danger(false)
	end

	if active_scheme == "camper" and bd_type ~= danger_object.grenade then
		return set_danger(false)
	end

	return set_danger(true)
end


function get_danger_time(danger,npc)
	local id = npc and npc:id()
	if (id and script_danger[id]) then
		return script_danger[id].danger_time
	end

	if (danger:type() == danger_object.entity_corpse) then
		local corpse_object = danger:object()
		return corpse_object:death_time()
	end

	return danger:time()
end

function get_danger_name(best_danger)
	local best_danger_object = best_danger:object()
	local bd_type = best_danger:type()

	if bd_type ~= danger_object.grenade and best_danger:dependent_object() ~= nil then
		best_danger_object = best_danger:dependent_object()
	end

	if best_danger_object == nil then
		return "none"
	end
	return best_danger_object:name()
end

----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
-- true - ???? danger, false - ??? danger
class "evaluator_danger" (property_evaluator)
function evaluator_danger:__init(name, storage, npc) super (nil, name)
	self.a = storage
end
function evaluator_danger:evaluate()
	local danger = self.object:best_danger()
	local id = self.object:id()
	if not (danger) then
		db.storage[id].danger_flag = false
		return false
	end

	if (self.a.danger_time and self.a.inertion_time and time_global() > self.a.danger_time + self.a.inertion_time) then
		db.storage[id].danger_flag = false
		if (get_danger_time(danger) == self.a.danger_time) then
			return false
		end
	end

	if (db.storage[id].danger_flag) then
		return true
	end

	if not(is_danger(self.object)) then
		db.storage[id].danger_flag = false
		return false
	end

	local se_obj = alife():object(id)
	if (se_obj and se_obj.m_smart_terrain_id ~= 65535) then
		alife():object(se_obj.m_smart_terrain_id):set_alarm()
	end

	if not (script_danger[id]) then
		local bd_type = danger:type()
		local src = DangerInertion[bd_types[bd_type]]--utils.cfg_get_string(ini,"danger_inertion",bd_types[bd_type],self.object,false,"","30000")
		local inertion = xr_logic.pick_section_from_condlist(db.actor,self.object,xr_logic.parse_condlist(self.object,bd_types[bd_type],"danger_intertion_time",src))
		inertion = tonumber(inertion)
		self.a.inertion_time = inertion
	else
		self.a.inertion_time = script_danger[id].danger_inertion or 30000
	end

	self.a.danger_time = get_danger_time(danger,self.object)

	db.storage[id].danger_flag = true
	return true
end

----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(object, ini, scheme, section, storage)
	--printf("init DANGER!!!")
	local operators	= {}
	local properties  = {}
	local manager = object:motivation_action_manager()


	local danger_action = manager:action(stalker_ids.action_danger_planner)
	local danger_action_planner = cast_planner(danger_action)

	manager:remove_evaluator(stalker_ids.property_danger)
	manager:add_evaluator(stalker_ids.property_danger, this.evaluator_danger("danger", storage, object))

	danger_action_planner:remove_evaluator(stalker_ids.property_danger)
	danger_action_planner:add_evaluator(stalker_ids.property_danger, this.evaluator_danger("danger", storage, object))
end
function set_danger(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	db.storage[npc:id()].danger_flag = false
end

function reset_danger(npc, scheme, st, section)
	local danger_section
	if scheme ~= nil and scheme ~= "nil" then
		danger_section = utils.cfg_get_string(st.ini, section, "danger", npc, false, "")
	end
end
