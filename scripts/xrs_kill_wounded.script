----------------------------------------------------------------------------------------------------------------------
-- xrs_kill_wounded
-- by Alundaio
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]
----------------------------------------------------------------------------------------------------------------------

local ini = ini_file("ai_tweaks\\xrs_kill_wounded.ltx")
local Enable = alun_utils.read_from_ini(ini,"settings","enable","bool",false)
local ActorKillWoundedEnable = Enable and alun_utils.read_from_ini(ini,"settings","actor_cause_surrender","string","true")
local ActorKillWoundedChance = Enable and alun_utils.read_from_ini(ini,"settings","actor_cause_surrender_chance","float",0.25)
local ActorKillWoundedMaxDist = Enable and alun_utils.read_from_ini(ini,"settings","actor_cause_surrender_max_dist","float",7)
local OnlyUsePistols = Enable and alun_utils.read_from_ini(ini,"settings","only_use_pistols","bool",false)
local RandomStateRun = Enable and alun_utils.read_from_ini(ini,"settings","random_state_run","bool",true)
local RandomStateWalk = Enable and alun_utils.read_from_ini(ini,"settings","random_state_walk","bool",false)
local MinDistanceRunState = Enable and alun_utils.read_from_ini(ini,"settings","state_run_min_distance","float",8)
local MinDistance = Enable and alun_utils.read_from_ini(ini,"settings","min_distance","float",3)
local MaxDistance = Enable and alun_utils.read_from_ini(ini,"settings","max_distance","float",5)
local MinVectorRotateY = Enable and alun_utils.read_from_ini(ini,"settings","min_vector_rotate_y","float",1)
local MaxVectorRotateY = Enable and alun_utils.read_from_ini(ini,"settings","max_vector_rotate_y","float",95)
local MinTriggerTimer = Enable and alun_utils.read_from_ini(ini,"settings","min_timer","float",3000)
local MaxTriggerTimer = Enable and alun_utils.read_from_ini(ini,"settings","max_timer","float",5000)
local SurrenderMinTriggerTimer = Enable and alun_utils.read_from_ini(ini,"settings","surrender_min_timer","float",5000)
local SurrenderMaxTriggerTimer = Enable and alun_utils.read_from_ini(ini,"settings","surrender_max_timer","float",5000)
local KillWoundedSoundChance = Enable and alun_utils.read_from_ini(ini,"settings","chance_to_play_sound","float",0.25)
local SurrenderChance = Enable and alun_utils.read_from_ini(ini,"settings","chance_to_play_surrender","float",0.25)
local CauseSurrenderCommunities = Enable and alun_utils.parse_list(ini,"settings","cause_surrender_communities",true)
ini = nil

function on_game_start()
	if not (Enable) then return end
	load_scheme("xrs_kill_wounded", "kill_wounded", 0)
	callback_register("npc_on_add_precondition",add_common_precondition)
	callback_register("npc_on_death_callback",npc_on_death_callback)
	callback_register("scheme_set",scheme_set)
	callback_register("npc_on_update",npc_on_update)
end

function add_common_precondition(action)
	action:add_precondition(world_property(evaid,false))
end

function scheme_set(npc,ini,section)
	set_kill_wounded(npc,ini,"kill_wounded")
end

-----------------------------------------------
class "eva_kill_wounded" ( property_evaluator )
function eva_kill_wounded:__init( name, storage ) super ( nil, name )
	self.st = storage
	self.st.stage = 0
end

function eva_kill_wounded:evaluate()
	local npc = self.object

	if not (npc:alive()) then
		return false
	end

	local is_wounded = xr_wounded.is_wounded

	if (is_wounded(npc)) then
		return false
	end

	if (xr_help_wounded.is_under_help_wounded(npc)) then
		return false
	end

	local st = self.st

	--alun_utils.printf("stage = %s",st.stage)
	if (st.stage == 0) then
		local tg = time_global()

		-- Delta
		if not (st.delta) then
			st.delta = 0
		end

		if (st.delta > tg) then
			return false
		end

		st.delta = tg+math.random(2000,3000)

		local vo = npc:best_enemy()
		if (vo and vo:alive() and IsStalker(vo) and is_wounded(vo)) then
			st.current_id = vo:id()

			st.vertex_id = get_rand_vertex(npc,vo) or vo:level_vertex_id()
			st.vertex_position = level.vertex_position(st.vertex_id)


			st.state_run = move.standing
			st.state_walk = move.standing
			if (RandomStateRun) then
				st.state_run = random_choice(move.standing,move.crouch)
			end

			if (RandomStateWalk) then
				st.state_walk = random_choice(move.standing,move.crouch)
			end

			npc:set_mental_state(anim.danger)

			npc:set_desired_position()
			npc:set_desired_direction()
			npc:set_path_type(game_object.level_path)

			st.stop_short = nil
			if (st.vertex_id == vo:level_vertex_id() or vo:position():distance_to(st.vertex_position) <= MinDistance) then
				st.stop_short = true
			end

			utils.send_to_nearest_accessible_vertex(npc,st.vertex_id)

			st.timer = nil
			st.hangtime = tg + 15000

			local comm = npc:character_community()
			if (vo:character_community() ~= "monolith" and vo:character_community() ~= "zombied") then
				if not (db.storage[vo:id()].victim_surrender) then
					if (CauseSurrenderCommunities[comm] and SurrenderChance > math.random() ) then
						db.storage[vo:id()].victim_surrender = npc:id()
					else
						db.storage[vo:id()].victim_surrender = 65535
					end
				end
			end

			if not (st.weapon) then st.weapon = best_weapon(npc) or npc:best_weapon() end

			npc:set_item(object.idle,st.weapon)
			st.stage = 1
			return true
		end
	elseif (st.stage == 1) then
		npc:set_item(object.aim1,st.weapon)

		local vo = npc:best_enemy()
		if (not vo) or (not vo:alive()) or (not is_wounded(vo)) then
			st.stage = 0
			return false
		end

		if (st.current_id ~= vo:id()) then
			st.stage = 0
			return false
		end

		npc:set_desired_position()
		npc:set_desired_direction()
		npc:set_path_type(game_object.level_path)

		utils.send_to_nearest_accessible_vertex(npc,st.vertex_id)
		return true
	end
	return false
end

function get_rand_vertex(npc,vo)
	local dir = npc:position():sub(vo:position())
	dir = vector_rotate_y(dir,math.random(MinVectorRotateY,MaxVectorRotateY))
	return vo:vertex_in_direction(vo:level_vertex_id(),dir,math.random(MinDistance,MaxDistance))
end
--------------------------------------------------------------------------------------------------------------
-- Action Kill Wounded

class "act_kill_wounded" ( action_base )
function act_kill_wounded:__init( name, storage )  super ( nil, name )
	self.st = storage
end
function act_kill_wounded:initialize()
	state_mgr.set_state(self.object,"idle")
	action_base.initialize( self )
end


function act_kill_wounded:execute()
	action_base.execute(self)

	local st = self.st
	local npc = self.object
	local vo = npc:best_enemy()

	if (not vo) or (not vo:alive()) or (not xr_wounded.is_wounded(vo)) then
		st.stage = 0
		return
	end

	local tg = time_global()

	if (st.timer and tg > st.timer) then
		npc:set_item(object.fire1,st.weapon,1,1)
		local look_pos = vo:bone_position("bip01_neck")
		npc:set_sight(look.fire_point,look_pos)
		return
	end

	if (st.hangtime and tg > st.hangtime) then
		st.stage = 0
		return
	end

	local dist = npc:position():distance_to(st.vertex_position)
	if (dist > MinDistanceRunState) then
		npc:set_body_state(st.state_run)
		npc:set_movement_type(move.run)
		local dir = vo:position()
		dir:sub(npc:position())
		npc:set_sight(look.direction,dir)
	else
		npc:set_movement_type(move.walk)
		npc:set_body_state(st.state_walk)

		local look_pos = vo:bone_position("bip01_head")
		npc:set_sight(look.fire_point,look_pos)
		npc:set_item(object.aim1,st.weapon)
	end

	if (st.stop_short and dist <= math.random(MinDistance,MaxDistance)) then
		--utils.send_to_nearest_accessible_vertex(npc,npc:level_vertex_id())
		npc:set_movement_type(move.stand)
		begin_kill_wounded(npc,vo,st)
		return
	end

	if (dist < 1.5) then
		begin_kill_wounded(npc,vo,st)
	end
end

function begin_kill_wounded(npc,vo,st)
	if not (st.timer) then
		local tg = time_global()

		if (math.random() < KillWoundedSoundChance) then
			xr_sound.set_sound_play(npc:id(),"kill_wounded")
		end

		if (db.storage[vo:id()].victim_surrender) then
			st.timer = tg + math.random(SurrenderMinTriggerTimer,SurrenderMaxTriggerTimer)
			--alun_utils.printf("%s--%s",vo:name(),vo:get_visual_name())
		else
			st.timer = tg + math.random(MinTriggerTimer,MaxTriggerTimer)
		end
	end
end


function act_kill_wounded:finalize()
	self.st.current_id = nil
	self.st.stage = 0
	self.st.vertex_id = nil
	self.st.vertex_position = nil
	self.st.state_walk = nil
	self.st.state_run = nil
	self.st.weapon = nil
	self.st.timer = nil
	action_base.finalize( self )
end

--------------------------------------------------------------------------------------------------------------
function set_kill_wounded(npc, ini)
	local st = xr_logic.assign_storage_and_bind(npc, ini, "kill_wounded")
end

evaid = 188112
actid = 188112
function add_to_binder(npc, ini, scheme, section, st)
	local manager = npc:motivation_action_manager()
	if not (Enable) then
		manager:add_evaluator(evaid,property_evaluator_const(false))
		return
	end

	if (character_community(npc) == "zombied" or npc:section() == "actor_visual_stalker") then
		manager:add_evaluator(evaid,property_evaluator_const(false))
		return
	end

	manager:add_evaluator(evaid,eva_kill_wounded("eva_kill_wounded",st))

	local wp = world_property
	local action = act_kill_wounded("act_kill_wounded",st)

	action:add_precondition( wp(evaid,true) )
	action:add_precondition( wp(stalker_ids.property_alive,true) )

	action:add_precondition( wp(stalker_ids.property_anomaly,false) )
	action:add_precondition( wp(xr_evaluators_id.sidor_wounded_base,false) )

	if (rx_ff) then
		action:add_precondition( wp(rx_ff.evid_dont_shoot,false) )
	end

	action:add_effect( wp(evaid,false) )

	manager:add_action(actid,action)

	local p = {
				xr_actions_id.stohe_meet_base+1,
				xr_actions_id.state_mgr + 1,
				xr_actions_id.state_mgr + 2,
				xr_actions_id.state_mgr + 3,
				stalker_ids.action_combat_planner,
				--xr_actions_id.wounded_exist		-- bug if not disabled
	}
	for i=1,#p,1 do
		action = manager:action(p[i])
		action:add_precondition( wp(evaid,false) )
	end
end

function is_under_kill_wounded(npc)
	local mgr = npc:motivation_action_manager()

	if not mgr:initialized() then
		return false
	end

	local current_action_id = mgr:current_action_id()
	return  current_action_id == actid
end

function best_weapon(npc)
	if (OnlyUsePistols) then
		return get_pistol(npc) or npc:best_weapon()
	end
end

function get_pistol(npc)
	local pistol = {[clsid.wpn_pm_s] = true,[clsid.wpn_walther_s] = true,[clsid.wpn_usp45_s] = true,[clsid.wpn_hpsa_s] = true,[clsid.wpn_lr300_s] = true}
	local wpn
	local function weapon_iterator(id,item)
		if id and not item then
			item = level.object_by_id(id)
		end
		if not item then
			return
		end
		if not id then
			id = item:id()
		end
		if (alun_utils.item_is_fa(item)) then
			if (pistol[item:clsid()]) then
				wpn = item
				return
			end
		end
	end
	npc:iterate_inventory(weapon_iterator)
	return wpn
end


function npc_on_update(npc,st)
	if not (xr_wounded.is_wounded(npc)) then
		return
	end

	if not (st.victim_surrender) then

		local cond = xr_logic.pick_section_from_condlist(db.actor,npc,xr_logic.parse_condlist(npc,"","",ActorKillWoundedEnable))
		if (cond ~= "true") then
			return
		end

		local active_item = db.actor:active_item()
		if (not active_item or not isWeapon(active_item)) then
			return
		end

		if (IsStalker(npc) == false or character_community(npc) == "zombied" or character_community(npc) == "monolith") then
			return
		end

		if (npc:relation(db.actor) ~= game_object.enemy) then
			return
		end

		if (not npc_in_actor_frustrum(npc) or npc:position():distance_to(db.actor:position()) >  ActorKillWoundedMaxDist) then
		--if (alun_utils.angle_diff(db.actor:direction(), db.actor:position():sub(npc:position())) < 90 or npc:position():distance_to(db.actor:position()) >  7) then
			return
		end

		if (math.random() >= ActorKillWoundedChance) then
			st.victim_surrender = 65535
			return
		end

		st.victim_surrender = db.actor:id()
	end
end
