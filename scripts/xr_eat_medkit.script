--[[
************************************************************
					xr_eat_medkit
by Alundaio original by Rulix
************************************************************

Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]
local eating = {}

function on_game_start()
	local ini = ini_file("ai_tweaks\\xr_eat_medkit.ltx")
	local enabled = alun_utils.read_from_ini(ini,"plugin","enable","bool",false)
	if not (enabled) then ini = nil return end
	callback_register("npc_on_update",npc_update)

	local sect = "plugin"
	eating.exc_comms = alun_utils.parse_list(ini,sect,"excluded_communities",true)
	eating.ic = alun_utils.read_from_ini(ini,sect,"in_combat","bool",false)
	eating.oc = alun_utils.read_from_ini(ini,sect,"out_combat","bool",true)
	eating.max_h = alun_utils.read_from_ini(ini,sect,"medkit_health","float",50)/100
	eating.min_b = alun_utils.read_from_ini(ini,sect,"bandage_bleeding","float",0.2)
	eating.medkits = alun_utils.parse_list(ini,sect,"medkits")
	eating.bandages = alun_utils.parse_list(ini,sect,"bandages")
	eating.medkit_delay = {}
	eating.bandage_delay = {}
	local ranks = alun_utils.get_rank_list()
	for k,v in ipairs(ranks) do
		eating.medkit_delay[v] = alun_utils.parse_list(ini,v,"medkit_delay")
		eating.bandage_delay[v] = alun_utils.parse_list(ini,v,"bandage_delay")
	end
	ini = nil
end

function npc_update(npc,st)
	if not (enabled) then
		return
	end

	if not (st.eat_medkit) then
		st.eat_medkit = eat_medkit(npc,st)
	else
		if not (npc:alive()) then
			st.eat_medkit:finalize()
			return
		end

		local comm = npc:character_community()
		if (comm == "trader" or comm == "zombied" or npc:clsid() == clsid.script_trader or npc:clsid() == clsid.trader) then
			return
		end

		if (xr_wounded.is_wounded(npc)) then
			return
		end

		st.eat_medkit:update()
	end
end


class "eat_medkit"
function eat_medkit:__init(object,storage)
	self.st = storage
	self.npc = object
	self.rank = ranks.get_obj_rank_name(object)
end

function eat_medkit:finalize()
	-- Finalize stuff
end

function eat_medkit:update()
	local timer_signal = alun_utils.get_timer(self)
	local stage = alun_utils.get_stage(self)

	if (stage == 0) then
		local enemy = self.npc:best_enemy()

		if (eating.oc and not eating.ic and enemy) then
			self.item = nil
			self.time = nil
			return
		end

		if (eating.ic and not eating.oc and not enemy) then
			self.item = nil
			self.time = nil
			return
		end

		if (self.npc.health < eating.max_h) then
			for i=1,#eating.medkits do
				local medkit = self.npc:object(eating.medkits[i])
				if (medkit) then
					local d_min = eating.medkit_delay[self.rank][1] or 10000
					local d_max = eating.medkit_delay[self.rank][2] or 15000
					alun_utils.set_timer(self,math.random(d_min,d_max))
					self.item = eating.medkits[i]
					alun_utils.next_stage(self)
					return
				end
			end
		end
		if (self.npc.bleeding > eating.min_b) then
			for i=1, #eating.bandages do
				local bandage = self.npc:object(eating.bandages[i])
				if (bandage) then
					local d_min = eating.bandage_delay[self.rank][1] or 10000
					local d_max = eating.bandage_delay[self.rank][2] or 15000
					alun_utils.set_timer(self,math.random(d_min,d_max))
					self.item = eating.bandages[i]
					alun_utils.next_stage(self)
					return
				end
			end
		end
	elseif (stage == 1) then
		if (timer_signal == 1) then
			if (self.item) then
				local med = self.npc:object(self.item)
				if med then
					consume_medkit(self.npc,med)
					--alun_utils.printf("%s[%s]: Used medical supplies",self.npc:name(),self.npc:character_name())
				end
				self.item = nil
			end
			alun_utils.set_stage(self,0)
		end
	end
end

function consume_medkit(npc,medkit)
	local ms = medkit:section()
	npc:eat(medkit)
	local time = alun_utils.read_from_ini(nil,ms,"boost_time","float",1)
	local health_restore = alun_utils.read_from_ini(nil,ms,"boost_health_restore","float",0)
	local bleeding_restore = alun_utils.read_from_ini(nil,ms,"boost_bleeding_restore","float",0)
	if (health_restore) then
		npc.health = health_restore*time*10
	end
	if (bleeding_restore) then
		npc.bleeding = bleeding_restore*time*10
	end
end
